
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cadastro_cliente
 * 
 */
export type cadastro_cliente = $Result.DefaultSelection<Prisma.$cadastro_clientePayload>
/**
 * Model cadastro_freelancer
 * 
 */
export type cadastro_freelancer = $Result.DefaultSelection<Prisma.$cadastro_freelancerPayload>
/**
 * Model categorias
 * 
 */
export type categorias = $Result.DefaultSelection<Prisma.$categoriasPayload>
/**
 * Model freelancer_categoria
 * 
 */
export type freelancer_categoria = $Result.DefaultSelection<Prisma.$freelancer_categoriaPayload>
/**
 * Model freelancer_habilidade
 * 
 */
export type freelancer_habilidade = $Result.DefaultSelection<Prisma.$freelancer_habilidadePayload>
/**
 * Model habilidades
 * 
 */
export type habilidades = $Result.DefaultSelection<Prisma.$habilidadesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cadastro_clientes
 * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cadastro_clientes
   * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cadastro_cliente`: Exposes CRUD operations for the **cadastro_cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_clientes
    * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
    * ```
    */
  get cadastro_cliente(): Prisma.cadastro_clienteDelegate<ExtArgs>;

  /**
   * `prisma.cadastro_freelancer`: Exposes CRUD operations for the **cadastro_freelancer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_freelancers
    * const cadastro_freelancers = await prisma.cadastro_freelancer.findMany()
    * ```
    */
  get cadastro_freelancer(): Prisma.cadastro_freelancerDelegate<ExtArgs>;

  /**
   * `prisma.categorias`: Exposes CRUD operations for the **categorias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categorias.findMany()
    * ```
    */
  get categorias(): Prisma.categoriasDelegate<ExtArgs>;

  /**
   * `prisma.freelancer_categoria`: Exposes CRUD operations for the **freelancer_categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Freelancer_categorias
    * const freelancer_categorias = await prisma.freelancer_categoria.findMany()
    * ```
    */
  get freelancer_categoria(): Prisma.freelancer_categoriaDelegate<ExtArgs>;

  /**
   * `prisma.freelancer_habilidade`: Exposes CRUD operations for the **freelancer_habilidade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Freelancer_habilidades
    * const freelancer_habilidades = await prisma.freelancer_habilidade.findMany()
    * ```
    */
  get freelancer_habilidade(): Prisma.freelancer_habilidadeDelegate<ExtArgs>;

  /**
   * `prisma.habilidades`: Exposes CRUD operations for the **habilidades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habilidades
    * const habilidades = await prisma.habilidades.findMany()
    * ```
    */
  get habilidades(): Prisma.habilidadesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cadastro_cliente: 'cadastro_cliente',
    cadastro_freelancer: 'cadastro_freelancer',
    categorias: 'categorias',
    freelancer_categoria: 'freelancer_categoria',
    freelancer_habilidade: 'freelancer_habilidade',
    habilidades: 'habilidades'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "cadastro_cliente" | "cadastro_freelancer" | "categorias" | "freelancer_categoria" | "freelancer_habilidade" | "habilidades"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      cadastro_cliente: {
        payload: Prisma.$cadastro_clientePayload<ExtArgs>
        fields: Prisma.cadastro_clienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_clienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_clienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          findFirst: {
            args: Prisma.cadastro_clienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_clienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          findMany: {
            args: Prisma.cadastro_clienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>[]
          }
          create: {
            args: Prisma.cadastro_clienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          createMany: {
            args: Prisma.cadastro_clienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.cadastro_clienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          update: {
            args: Prisma.cadastro_clienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          deleteMany: {
            args: Prisma.cadastro_clienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_clienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_clienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          aggregate: {
            args: Prisma.Cadastro_clienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_cliente>
          }
          groupBy: {
            args: Prisma.cadastro_clienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_clienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_clienteCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_clienteCountAggregateOutputType> | number
          }
        }
      }
      cadastro_freelancer: {
        payload: Prisma.$cadastro_freelancerPayload<ExtArgs>
        fields: Prisma.cadastro_freelancerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_freelancerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_freelancerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          findFirst: {
            args: Prisma.cadastro_freelancerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_freelancerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          findMany: {
            args: Prisma.cadastro_freelancerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>[]
          }
          create: {
            args: Prisma.cadastro_freelancerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          createMany: {
            args: Prisma.cadastro_freelancerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.cadastro_freelancerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          update: {
            args: Prisma.cadastro_freelancerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          deleteMany: {
            args: Prisma.cadastro_freelancerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_freelancerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_freelancerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_freelancerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_freelancer>
          }
          groupBy: {
            args: Prisma.cadastro_freelancerGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_freelancerGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_freelancerCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_freelancerCountAggregateOutputType> | number
          }
        }
      }
      categorias: {
        payload: Prisma.$categoriasPayload<ExtArgs>
        fields: Prisma.categoriasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          findFirst: {
            args: Prisma.categoriasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          findMany: {
            args: Prisma.categoriasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>[]
          }
          create: {
            args: Prisma.categoriasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          createMany: {
            args: Prisma.categoriasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.categoriasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          update: {
            args: Prisma.categoriasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          deleteMany: {
            args: Prisma.categoriasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoriasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.categoriasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          aggregate: {
            args: Prisma.CategoriasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorias>
          }
          groupBy: {
            args: Prisma.categoriasGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriasGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriasCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriasCountAggregateOutputType> | number
          }
        }
      }
      freelancer_categoria: {
        payload: Prisma.$freelancer_categoriaPayload<ExtArgs>
        fields: Prisma.freelancer_categoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.freelancer_categoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.freelancer_categoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload>
          }
          findFirst: {
            args: Prisma.freelancer_categoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.freelancer_categoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload>
          }
          findMany: {
            args: Prisma.freelancer_categoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload>[]
          }
          create: {
            args: Prisma.freelancer_categoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload>
          }
          createMany: {
            args: Prisma.freelancer_categoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.freelancer_categoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload>
          }
          update: {
            args: Prisma.freelancer_categoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload>
          }
          deleteMany: {
            args: Prisma.freelancer_categoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.freelancer_categoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.freelancer_categoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_categoriaPayload>
          }
          aggregate: {
            args: Prisma.Freelancer_categoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFreelancer_categoria>
          }
          groupBy: {
            args: Prisma.freelancer_categoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<Freelancer_categoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.freelancer_categoriaCountArgs<ExtArgs>
            result: $Utils.Optional<Freelancer_categoriaCountAggregateOutputType> | number
          }
        }
      }
      freelancer_habilidade: {
        payload: Prisma.$freelancer_habilidadePayload<ExtArgs>
        fields: Prisma.freelancer_habilidadeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.freelancer_habilidadeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.freelancer_habilidadeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload>
          }
          findFirst: {
            args: Prisma.freelancer_habilidadeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.freelancer_habilidadeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload>
          }
          findMany: {
            args: Prisma.freelancer_habilidadeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload>[]
          }
          create: {
            args: Prisma.freelancer_habilidadeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload>
          }
          createMany: {
            args: Prisma.freelancer_habilidadeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.freelancer_habilidadeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload>
          }
          update: {
            args: Prisma.freelancer_habilidadeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload>
          }
          deleteMany: {
            args: Prisma.freelancer_habilidadeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.freelancer_habilidadeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.freelancer_habilidadeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$freelancer_habilidadePayload>
          }
          aggregate: {
            args: Prisma.Freelancer_habilidadeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFreelancer_habilidade>
          }
          groupBy: {
            args: Prisma.freelancer_habilidadeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Freelancer_habilidadeGroupByOutputType>[]
          }
          count: {
            args: Prisma.freelancer_habilidadeCountArgs<ExtArgs>
            result: $Utils.Optional<Freelancer_habilidadeCountAggregateOutputType> | number
          }
        }
      }
      habilidades: {
        payload: Prisma.$habilidadesPayload<ExtArgs>
        fields: Prisma.habilidadesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.habilidadesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.habilidadesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload>
          }
          findFirst: {
            args: Prisma.habilidadesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.habilidadesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload>
          }
          findMany: {
            args: Prisma.habilidadesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload>[]
          }
          create: {
            args: Prisma.habilidadesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload>
          }
          createMany: {
            args: Prisma.habilidadesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.habilidadesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload>
          }
          update: {
            args: Prisma.habilidadesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload>
          }
          deleteMany: {
            args: Prisma.habilidadesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.habilidadesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.habilidadesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habilidadesPayload>
          }
          aggregate: {
            args: Prisma.HabilidadesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHabilidades>
          }
          groupBy: {
            args: Prisma.habilidadesGroupByArgs<ExtArgs>
            result: $Utils.Optional<HabilidadesGroupByOutputType>[]
          }
          count: {
            args: Prisma.habilidadesCountArgs<ExtArgs>
            result: $Utils.Optional<HabilidadesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model cadastro_cliente
   */

  export type AggregateCadastro_cliente = {
    _count: Cadastro_clienteCountAggregateOutputType | null
    _avg: Cadastro_clienteAvgAggregateOutputType | null
    _sum: Cadastro_clienteSumAggregateOutputType | null
    _min: Cadastro_clienteMinAggregateOutputType | null
    _max: Cadastro_clienteMaxAggregateOutputType | null
  }

  export type Cadastro_clienteAvgAggregateOutputType = {
    id: number | null
    cnpj_cliente: number | null
  }

  export type Cadastro_clienteSumAggregateOutputType = {
    id: number | null
    cnpj_cliente: bigint | null
  }

  export type Cadastro_clienteMinAggregateOutputType = {
    id: number | null
    nome_cliente: string | null
    cnpj_cliente: bigint | null
    email_cliente: string | null
    senha_cliente: string | null
    is_premium: boolean | null
  }

  export type Cadastro_clienteMaxAggregateOutputType = {
    id: number | null
    nome_cliente: string | null
    cnpj_cliente: bigint | null
    email_cliente: string | null
    senha_cliente: string | null
    is_premium: boolean | null
  }

  export type Cadastro_clienteCountAggregateOutputType = {
    id: number
    nome_cliente: number
    cnpj_cliente: number
    email_cliente: number
    senha_cliente: number
    is_premium: number
    _all: number
  }


  export type Cadastro_clienteAvgAggregateInputType = {
    id?: true
    cnpj_cliente?: true
  }

  export type Cadastro_clienteSumAggregateInputType = {
    id?: true
    cnpj_cliente?: true
  }

  export type Cadastro_clienteMinAggregateInputType = {
    id?: true
    nome_cliente?: true
    cnpj_cliente?: true
    email_cliente?: true
    senha_cliente?: true
    is_premium?: true
  }

  export type Cadastro_clienteMaxAggregateInputType = {
    id?: true
    nome_cliente?: true
    cnpj_cliente?: true
    email_cliente?: true
    senha_cliente?: true
    is_premium?: true
  }

  export type Cadastro_clienteCountAggregateInputType = {
    id?: true
    nome_cliente?: true
    cnpj_cliente?: true
    email_cliente?: true
    senha_cliente?: true
    is_premium?: true
    _all?: true
  }

  export type Cadastro_clienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_cliente to aggregate.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_clientes
    **/
    _count?: true | Cadastro_clienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cadastro_clienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cadastro_clienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_clienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_clienteMaxAggregateInputType
  }

  export type GetCadastro_clienteAggregateType<T extends Cadastro_clienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_cliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_cliente[P]>
      : GetScalarType<T[P], AggregateCadastro_cliente[P]>
  }




  export type cadastro_clienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_clienteWhereInput
    orderBy?: cadastro_clienteOrderByWithAggregationInput | cadastro_clienteOrderByWithAggregationInput[]
    by: Cadastro_clienteScalarFieldEnum[] | Cadastro_clienteScalarFieldEnum
    having?: cadastro_clienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_clienteCountAggregateInputType | true
    _avg?: Cadastro_clienteAvgAggregateInputType
    _sum?: Cadastro_clienteSumAggregateInputType
    _min?: Cadastro_clienteMinAggregateInputType
    _max?: Cadastro_clienteMaxAggregateInputType
  }

  export type Cadastro_clienteGroupByOutputType = {
    id: number
    nome_cliente: string
    cnpj_cliente: bigint
    email_cliente: string
    senha_cliente: string
    is_premium: boolean
    _count: Cadastro_clienteCountAggregateOutputType | null
    _avg: Cadastro_clienteAvgAggregateOutputType | null
    _sum: Cadastro_clienteSumAggregateOutputType | null
    _min: Cadastro_clienteMinAggregateOutputType | null
    _max: Cadastro_clienteMaxAggregateOutputType | null
  }

  type GetCadastro_clienteGroupByPayload<T extends cadastro_clienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_clienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_clienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_clienteGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_clienteGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_clienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_cliente?: boolean
    cnpj_cliente?: boolean
    email_cliente?: boolean
    senha_cliente?: boolean
    is_premium?: boolean
  }, ExtArgs["result"]["cadastro_cliente"]>


  export type cadastro_clienteSelectScalar = {
    id?: boolean
    nome_cliente?: boolean
    cnpj_cliente?: boolean
    email_cliente?: boolean
    senha_cliente?: boolean
    is_premium?: boolean
  }


  export type $cadastro_clientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_cliente"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome_cliente: string
      cnpj_cliente: bigint
      email_cliente: string
      senha_cliente: string
      is_premium: boolean
    }, ExtArgs["result"]["cadastro_cliente"]>
    composites: {}
  }

  type cadastro_clienteGetPayload<S extends boolean | null | undefined | cadastro_clienteDefaultArgs> = $Result.GetResult<Prisma.$cadastro_clientePayload, S>

  type cadastro_clienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cadastro_clienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cadastro_clienteCountAggregateInputType | true
    }

  export interface cadastro_clienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_cliente'], meta: { name: 'cadastro_cliente' } }
    /**
     * Find zero or one Cadastro_cliente that matches the filter.
     * @param {cadastro_clienteFindUniqueArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cadastro_clienteFindUniqueArgs>(args: SelectSubset<T, cadastro_clienteFindUniqueArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cadastro_cliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cadastro_clienteFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cadastro_clienteFindUniqueOrThrowArgs>(args: SelectSubset<T, cadastro_clienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cadastro_cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteFindFirstArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cadastro_clienteFindFirstArgs>(args?: SelectSubset<T, cadastro_clienteFindFirstArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cadastro_cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteFindFirstOrThrowArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cadastro_clienteFindFirstOrThrowArgs>(args?: SelectSubset<T, cadastro_clienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cadastro_clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_clientes
     * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
     * 
     * // Get first 10 Cadastro_clientes
     * const cadastro_clientes = await prisma.cadastro_cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_clienteWithIdOnly = await prisma.cadastro_cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cadastro_clienteFindManyArgs>(args?: SelectSubset<T, cadastro_clienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cadastro_cliente.
     * @param {cadastro_clienteCreateArgs} args - Arguments to create a Cadastro_cliente.
     * @example
     * // Create one Cadastro_cliente
     * const Cadastro_cliente = await prisma.cadastro_cliente.create({
     *   data: {
     *     // ... data to create a Cadastro_cliente
     *   }
     * })
     * 
     */
    create<T extends cadastro_clienteCreateArgs>(args: SelectSubset<T, cadastro_clienteCreateArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cadastro_clientes.
     * @param {cadastro_clienteCreateManyArgs} args - Arguments to create many Cadastro_clientes.
     * @example
     * // Create many Cadastro_clientes
     * const cadastro_cliente = await prisma.cadastro_cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cadastro_clienteCreateManyArgs>(args?: SelectSubset<T, cadastro_clienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro_cliente.
     * @param {cadastro_clienteDeleteArgs} args - Arguments to delete one Cadastro_cliente.
     * @example
     * // Delete one Cadastro_cliente
     * const Cadastro_cliente = await prisma.cadastro_cliente.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_cliente
     *   }
     * })
     * 
     */
    delete<T extends cadastro_clienteDeleteArgs>(args: SelectSubset<T, cadastro_clienteDeleteArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cadastro_cliente.
     * @param {cadastro_clienteUpdateArgs} args - Arguments to update one Cadastro_cliente.
     * @example
     * // Update one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cadastro_clienteUpdateArgs>(args: SelectSubset<T, cadastro_clienteUpdateArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cadastro_clientes.
     * @param {cadastro_clienteDeleteManyArgs} args - Arguments to filter Cadastro_clientes to delete.
     * @example
     * // Delete a few Cadastro_clientes
     * const { count } = await prisma.cadastro_cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cadastro_clienteDeleteManyArgs>(args?: SelectSubset<T, cadastro_clienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_clientes
     * const cadastro_cliente = await prisma.cadastro_cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cadastro_clienteUpdateManyArgs>(args: SelectSubset<T, cadastro_clienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_cliente.
     * @param {cadastro_clienteUpsertArgs} args - Arguments to update or create a Cadastro_cliente.
     * @example
     * // Update or create a Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.upsert({
     *   create: {
     *     // ... data to create a Cadastro_cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_cliente we want to update
     *   }
     * })
     */
    upsert<T extends cadastro_clienteUpsertArgs>(args: SelectSubset<T, cadastro_clienteUpsertArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cadastro_clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteCountArgs} args - Arguments to filter Cadastro_clientes to count.
     * @example
     * // Count the number of Cadastro_clientes
     * const count = await prisma.cadastro_cliente.count({
     *   where: {
     *     // ... the filter for the Cadastro_clientes we want to count
     *   }
     * })
    **/
    count<T extends cadastro_clienteCountArgs>(
      args?: Subset<T, cadastro_clienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_clienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_clienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_clienteAggregateArgs>(args: Subset<T, Cadastro_clienteAggregateArgs>): Prisma.PrismaPromise<GetCadastro_clienteAggregateType<T>>

    /**
     * Group by Cadastro_cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_clienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_clienteGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_clienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_clienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_clienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_cliente model
   */
  readonly fields: cadastro_clienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_clienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cadastro_cliente model
   */ 
  interface cadastro_clienteFieldRefs {
    readonly id: FieldRef<"cadastro_cliente", 'Int'>
    readonly nome_cliente: FieldRef<"cadastro_cliente", 'String'>
    readonly cnpj_cliente: FieldRef<"cadastro_cliente", 'BigInt'>
    readonly email_cliente: FieldRef<"cadastro_cliente", 'String'>
    readonly senha_cliente: FieldRef<"cadastro_cliente", 'String'>
    readonly is_premium: FieldRef<"cadastro_cliente", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * cadastro_cliente findUnique
   */
  export type cadastro_clienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente findUniqueOrThrow
   */
  export type cadastro_clienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente findFirst
   */
  export type cadastro_clienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_clientes.
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_clientes.
     */
    distinct?: Cadastro_clienteScalarFieldEnum | Cadastro_clienteScalarFieldEnum[]
  }

  /**
   * cadastro_cliente findFirstOrThrow
   */
  export type cadastro_clienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_clientes.
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_clientes.
     */
    distinct?: Cadastro_clienteScalarFieldEnum | Cadastro_clienteScalarFieldEnum[]
  }

  /**
   * cadastro_cliente findMany
   */
  export type cadastro_clienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_clientes to fetch.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_clientes.
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    distinct?: Cadastro_clienteScalarFieldEnum | Cadastro_clienteScalarFieldEnum[]
  }

  /**
   * cadastro_cliente create
   */
  export type cadastro_clienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * The data needed to create a cadastro_cliente.
     */
    data: XOR<cadastro_clienteCreateInput, cadastro_clienteUncheckedCreateInput>
  }

  /**
   * cadastro_cliente createMany
   */
  export type cadastro_clienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_clientes.
     */
    data: cadastro_clienteCreateManyInput | cadastro_clienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_cliente update
   */
  export type cadastro_clienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * The data needed to update a cadastro_cliente.
     */
    data: XOR<cadastro_clienteUpdateInput, cadastro_clienteUncheckedUpdateInput>
    /**
     * Choose, which cadastro_cliente to update.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente updateMany
   */
  export type cadastro_clienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_clientes.
     */
    data: XOR<cadastro_clienteUpdateManyMutationInput, cadastro_clienteUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_clientes to update
     */
    where?: cadastro_clienteWhereInput
  }

  /**
   * cadastro_cliente upsert
   */
  export type cadastro_clienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * The filter to search for the cadastro_cliente to update in case it exists.
     */
    where: cadastro_clienteWhereUniqueInput
    /**
     * In case the cadastro_cliente found by the `where` argument doesn't exist, create a new cadastro_cliente with this data.
     */
    create: XOR<cadastro_clienteCreateInput, cadastro_clienteUncheckedCreateInput>
    /**
     * In case the cadastro_cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_clienteUpdateInput, cadastro_clienteUncheckedUpdateInput>
  }

  /**
   * cadastro_cliente delete
   */
  export type cadastro_clienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter which cadastro_cliente to delete.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente deleteMany
   */
  export type cadastro_clienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_clientes to delete
     */
    where?: cadastro_clienteWhereInput
  }

  /**
   * cadastro_cliente without action
   */
  export type cadastro_clienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
  }


  /**
   * Model cadastro_freelancer
   */

  export type AggregateCadastro_freelancer = {
    _count: Cadastro_freelancerCountAggregateOutputType | null
    _avg: Cadastro_freelancerAvgAggregateOutputType | null
    _sum: Cadastro_freelancerSumAggregateOutputType | null
    _min: Cadastro_freelancerMinAggregateOutputType | null
    _max: Cadastro_freelancerMaxAggregateOutputType | null
  }

  export type Cadastro_freelancerAvgAggregateOutputType = {
    id: number | null
    cpf_freelancer: number | null
  }

  export type Cadastro_freelancerSumAggregateOutputType = {
    id: number | null
    cpf_freelancer: bigint | null
  }

  export type Cadastro_freelancerMinAggregateOutputType = {
    id: number | null
    nome_freelancer: string | null
    data_nascimento: Date | null
    cpf_freelancer: bigint | null
    email_freelancer: string | null
    senha_freelancer: string | null
    is_premium: boolean | null
  }

  export type Cadastro_freelancerMaxAggregateOutputType = {
    id: number | null
    nome_freelancer: string | null
    data_nascimento: Date | null
    cpf_freelancer: bigint | null
    email_freelancer: string | null
    senha_freelancer: string | null
    is_premium: boolean | null
  }

  export type Cadastro_freelancerCountAggregateOutputType = {
    id: number
    nome_freelancer: number
    data_nascimento: number
    cpf_freelancer: number
    email_freelancer: number
    senha_freelancer: number
    is_premium: number
    _all: number
  }


  export type Cadastro_freelancerAvgAggregateInputType = {
    id?: true
    cpf_freelancer?: true
  }

  export type Cadastro_freelancerSumAggregateInputType = {
    id?: true
    cpf_freelancer?: true
  }

  export type Cadastro_freelancerMinAggregateInputType = {
    id?: true
    nome_freelancer?: true
    data_nascimento?: true
    cpf_freelancer?: true
    email_freelancer?: true
    senha_freelancer?: true
    is_premium?: true
  }

  export type Cadastro_freelancerMaxAggregateInputType = {
    id?: true
    nome_freelancer?: true
    data_nascimento?: true
    cpf_freelancer?: true
    email_freelancer?: true
    senha_freelancer?: true
    is_premium?: true
  }

  export type Cadastro_freelancerCountAggregateInputType = {
    id?: true
    nome_freelancer?: true
    data_nascimento?: true
    cpf_freelancer?: true
    email_freelancer?: true
    senha_freelancer?: true
    is_premium?: true
    _all?: true
  }

  export type Cadastro_freelancerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_freelancer to aggregate.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_freelancers
    **/
    _count?: true | Cadastro_freelancerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cadastro_freelancerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cadastro_freelancerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_freelancerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_freelancerMaxAggregateInputType
  }

  export type GetCadastro_freelancerAggregateType<T extends Cadastro_freelancerAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_freelancer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_freelancer[P]>
      : GetScalarType<T[P], AggregateCadastro_freelancer[P]>
  }




  export type cadastro_freelancerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_freelancerWhereInput
    orderBy?: cadastro_freelancerOrderByWithAggregationInput | cadastro_freelancerOrderByWithAggregationInput[]
    by: Cadastro_freelancerScalarFieldEnum[] | Cadastro_freelancerScalarFieldEnum
    having?: cadastro_freelancerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_freelancerCountAggregateInputType | true
    _avg?: Cadastro_freelancerAvgAggregateInputType
    _sum?: Cadastro_freelancerSumAggregateInputType
    _min?: Cadastro_freelancerMinAggregateInputType
    _max?: Cadastro_freelancerMaxAggregateInputType
  }

  export type Cadastro_freelancerGroupByOutputType = {
    id: number
    nome_freelancer: string
    data_nascimento: Date
    cpf_freelancer: bigint
    email_freelancer: string
    senha_freelancer: string
    is_premium: boolean
    _count: Cadastro_freelancerCountAggregateOutputType | null
    _avg: Cadastro_freelancerAvgAggregateOutputType | null
    _sum: Cadastro_freelancerSumAggregateOutputType | null
    _min: Cadastro_freelancerMinAggregateOutputType | null
    _max: Cadastro_freelancerMaxAggregateOutputType | null
  }

  type GetCadastro_freelancerGroupByPayload<T extends cadastro_freelancerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_freelancerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_freelancerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_freelancerGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_freelancerGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_freelancerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_freelancer?: boolean
    data_nascimento?: boolean
    cpf_freelancer?: boolean
    email_freelancer?: boolean
    senha_freelancer?: boolean
    is_premium?: boolean
  }, ExtArgs["result"]["cadastro_freelancer"]>


  export type cadastro_freelancerSelectScalar = {
    id?: boolean
    nome_freelancer?: boolean
    data_nascimento?: boolean
    cpf_freelancer?: boolean
    email_freelancer?: boolean
    senha_freelancer?: boolean
    is_premium?: boolean
  }


  export type $cadastro_freelancerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_freelancer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome_freelancer: string
      data_nascimento: Date
      cpf_freelancer: bigint
      email_freelancer: string
      senha_freelancer: string
      is_premium: boolean
    }, ExtArgs["result"]["cadastro_freelancer"]>
    composites: {}
  }

  type cadastro_freelancerGetPayload<S extends boolean | null | undefined | cadastro_freelancerDefaultArgs> = $Result.GetResult<Prisma.$cadastro_freelancerPayload, S>

  type cadastro_freelancerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cadastro_freelancerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cadastro_freelancerCountAggregateInputType | true
    }

  export interface cadastro_freelancerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_freelancer'], meta: { name: 'cadastro_freelancer' } }
    /**
     * Find zero or one Cadastro_freelancer that matches the filter.
     * @param {cadastro_freelancerFindUniqueArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cadastro_freelancerFindUniqueArgs>(args: SelectSubset<T, cadastro_freelancerFindUniqueArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cadastro_freelancer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cadastro_freelancerFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cadastro_freelancerFindUniqueOrThrowArgs>(args: SelectSubset<T, cadastro_freelancerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cadastro_freelancer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerFindFirstArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cadastro_freelancerFindFirstArgs>(args?: SelectSubset<T, cadastro_freelancerFindFirstArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cadastro_freelancer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerFindFirstOrThrowArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cadastro_freelancerFindFirstOrThrowArgs>(args?: SelectSubset<T, cadastro_freelancerFindFirstOrThrowArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cadastro_freelancers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_freelancers
     * const cadastro_freelancers = await prisma.cadastro_freelancer.findMany()
     * 
     * // Get first 10 Cadastro_freelancers
     * const cadastro_freelancers = await prisma.cadastro_freelancer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_freelancerWithIdOnly = await prisma.cadastro_freelancer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cadastro_freelancerFindManyArgs>(args?: SelectSubset<T, cadastro_freelancerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cadastro_freelancer.
     * @param {cadastro_freelancerCreateArgs} args - Arguments to create a Cadastro_freelancer.
     * @example
     * // Create one Cadastro_freelancer
     * const Cadastro_freelancer = await prisma.cadastro_freelancer.create({
     *   data: {
     *     // ... data to create a Cadastro_freelancer
     *   }
     * })
     * 
     */
    create<T extends cadastro_freelancerCreateArgs>(args: SelectSubset<T, cadastro_freelancerCreateArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cadastro_freelancers.
     * @param {cadastro_freelancerCreateManyArgs} args - Arguments to create many Cadastro_freelancers.
     * @example
     * // Create many Cadastro_freelancers
     * const cadastro_freelancer = await prisma.cadastro_freelancer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cadastro_freelancerCreateManyArgs>(args?: SelectSubset<T, cadastro_freelancerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro_freelancer.
     * @param {cadastro_freelancerDeleteArgs} args - Arguments to delete one Cadastro_freelancer.
     * @example
     * // Delete one Cadastro_freelancer
     * const Cadastro_freelancer = await prisma.cadastro_freelancer.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_freelancer
     *   }
     * })
     * 
     */
    delete<T extends cadastro_freelancerDeleteArgs>(args: SelectSubset<T, cadastro_freelancerDeleteArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cadastro_freelancer.
     * @param {cadastro_freelancerUpdateArgs} args - Arguments to update one Cadastro_freelancer.
     * @example
     * // Update one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cadastro_freelancerUpdateArgs>(args: SelectSubset<T, cadastro_freelancerUpdateArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cadastro_freelancers.
     * @param {cadastro_freelancerDeleteManyArgs} args - Arguments to filter Cadastro_freelancers to delete.
     * @example
     * // Delete a few Cadastro_freelancers
     * const { count } = await prisma.cadastro_freelancer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cadastro_freelancerDeleteManyArgs>(args?: SelectSubset<T, cadastro_freelancerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_freelancers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_freelancers
     * const cadastro_freelancer = await prisma.cadastro_freelancer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cadastro_freelancerUpdateManyArgs>(args: SelectSubset<T, cadastro_freelancerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_freelancer.
     * @param {cadastro_freelancerUpsertArgs} args - Arguments to update or create a Cadastro_freelancer.
     * @example
     * // Update or create a Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.upsert({
     *   create: {
     *     // ... data to create a Cadastro_freelancer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_freelancer we want to update
     *   }
     * })
     */
    upsert<T extends cadastro_freelancerUpsertArgs>(args: SelectSubset<T, cadastro_freelancerUpsertArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cadastro_freelancers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerCountArgs} args - Arguments to filter Cadastro_freelancers to count.
     * @example
     * // Count the number of Cadastro_freelancers
     * const count = await prisma.cadastro_freelancer.count({
     *   where: {
     *     // ... the filter for the Cadastro_freelancers we want to count
     *   }
     * })
    **/
    count<T extends cadastro_freelancerCountArgs>(
      args?: Subset<T, cadastro_freelancerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_freelancerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_freelancer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_freelancerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_freelancerAggregateArgs>(args: Subset<T, Cadastro_freelancerAggregateArgs>): Prisma.PrismaPromise<GetCadastro_freelancerAggregateType<T>>

    /**
     * Group by Cadastro_freelancer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_freelancerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_freelancerGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_freelancerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_freelancerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_freelancerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_freelancer model
   */
  readonly fields: cadastro_freelancerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_freelancer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_freelancerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cadastro_freelancer model
   */ 
  interface cadastro_freelancerFieldRefs {
    readonly id: FieldRef<"cadastro_freelancer", 'Int'>
    readonly nome_freelancer: FieldRef<"cadastro_freelancer", 'String'>
    readonly data_nascimento: FieldRef<"cadastro_freelancer", 'DateTime'>
    readonly cpf_freelancer: FieldRef<"cadastro_freelancer", 'BigInt'>
    readonly email_freelancer: FieldRef<"cadastro_freelancer", 'String'>
    readonly senha_freelancer: FieldRef<"cadastro_freelancer", 'String'>
    readonly is_premium: FieldRef<"cadastro_freelancer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * cadastro_freelancer findUnique
   */
  export type cadastro_freelancerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer findUniqueOrThrow
   */
  export type cadastro_freelancerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer findFirst
   */
  export type cadastro_freelancerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_freelancers.
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_freelancers.
     */
    distinct?: Cadastro_freelancerScalarFieldEnum | Cadastro_freelancerScalarFieldEnum[]
  }

  /**
   * cadastro_freelancer findFirstOrThrow
   */
  export type cadastro_freelancerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_freelancers.
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_freelancers.
     */
    distinct?: Cadastro_freelancerScalarFieldEnum | Cadastro_freelancerScalarFieldEnum[]
  }

  /**
   * cadastro_freelancer findMany
   */
  export type cadastro_freelancerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancers to fetch.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_freelancers.
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    distinct?: Cadastro_freelancerScalarFieldEnum | Cadastro_freelancerScalarFieldEnum[]
  }

  /**
   * cadastro_freelancer create
   */
  export type cadastro_freelancerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * The data needed to create a cadastro_freelancer.
     */
    data: XOR<cadastro_freelancerCreateInput, cadastro_freelancerUncheckedCreateInput>
  }

  /**
   * cadastro_freelancer createMany
   */
  export type cadastro_freelancerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_freelancers.
     */
    data: cadastro_freelancerCreateManyInput | cadastro_freelancerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_freelancer update
   */
  export type cadastro_freelancerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * The data needed to update a cadastro_freelancer.
     */
    data: XOR<cadastro_freelancerUpdateInput, cadastro_freelancerUncheckedUpdateInput>
    /**
     * Choose, which cadastro_freelancer to update.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer updateMany
   */
  export type cadastro_freelancerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_freelancers.
     */
    data: XOR<cadastro_freelancerUpdateManyMutationInput, cadastro_freelancerUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_freelancers to update
     */
    where?: cadastro_freelancerWhereInput
  }

  /**
   * cadastro_freelancer upsert
   */
  export type cadastro_freelancerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * The filter to search for the cadastro_freelancer to update in case it exists.
     */
    where: cadastro_freelancerWhereUniqueInput
    /**
     * In case the cadastro_freelancer found by the `where` argument doesn't exist, create a new cadastro_freelancer with this data.
     */
    create: XOR<cadastro_freelancerCreateInput, cadastro_freelancerUncheckedCreateInput>
    /**
     * In case the cadastro_freelancer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_freelancerUpdateInput, cadastro_freelancerUncheckedUpdateInput>
  }

  /**
   * cadastro_freelancer delete
   */
  export type cadastro_freelancerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter which cadastro_freelancer to delete.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer deleteMany
   */
  export type cadastro_freelancerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_freelancers to delete
     */
    where?: cadastro_freelancerWhereInput
  }

  /**
   * cadastro_freelancer without action
   */
  export type cadastro_freelancerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
  }


  /**
   * Model categorias
   */

  export type AggregateCategorias = {
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  export type CategoriasAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriasSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriasMinAggregateOutputType = {
    id: number | null
    nome_categoria: string | null
    icon_categoria: string | null
  }

  export type CategoriasMaxAggregateOutputType = {
    id: number | null
    nome_categoria: string | null
    icon_categoria: string | null
  }

  export type CategoriasCountAggregateOutputType = {
    id: number
    nome_categoria: number
    icon_categoria: number
    _all: number
  }


  export type CategoriasAvgAggregateInputType = {
    id?: true
  }

  export type CategoriasSumAggregateInputType = {
    id?: true
  }

  export type CategoriasMinAggregateInputType = {
    id?: true
    nome_categoria?: true
    icon_categoria?: true
  }

  export type CategoriasMaxAggregateInputType = {
    id?: true
    nome_categoria?: true
    icon_categoria?: true
  }

  export type CategoriasCountAggregateInputType = {
    id?: true
    nome_categoria?: true
    icon_categoria?: true
    _all?: true
  }

  export type CategoriasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to aggregate.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriasMaxAggregateInputType
  }

  export type GetCategoriasAggregateType<T extends CategoriasAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorias[P]>
      : GetScalarType<T[P], AggregateCategorias[P]>
  }




  export type categoriasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriasWhereInput
    orderBy?: categoriasOrderByWithAggregationInput | categoriasOrderByWithAggregationInput[]
    by: CategoriasScalarFieldEnum[] | CategoriasScalarFieldEnum
    having?: categoriasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriasCountAggregateInputType | true
    _avg?: CategoriasAvgAggregateInputType
    _sum?: CategoriasSumAggregateInputType
    _min?: CategoriasMinAggregateInputType
    _max?: CategoriasMaxAggregateInputType
  }

  export type CategoriasGroupByOutputType = {
    id: number
    nome_categoria: string
    icon_categoria: string
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  type GetCategoriasGroupByPayload<T extends categoriasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
        }
      >
    >


  export type categoriasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_categoria?: boolean
    icon_categoria?: boolean
  }, ExtArgs["result"]["categorias"]>


  export type categoriasSelectScalar = {
    id?: boolean
    nome_categoria?: boolean
    icon_categoria?: boolean
  }


  export type $categoriasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categorias"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome_categoria: string
      icon_categoria: string
    }, ExtArgs["result"]["categorias"]>
    composites: {}
  }

  type categoriasGetPayload<S extends boolean | null | undefined | categoriasDefaultArgs> = $Result.GetResult<Prisma.$categoriasPayload, S>

  type categoriasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriasCountAggregateInputType | true
    }

  export interface categoriasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categorias'], meta: { name: 'categorias' } }
    /**
     * Find zero or one Categorias that matches the filter.
     * @param {categoriasFindUniqueArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoriasFindUniqueArgs>(args: SelectSubset<T, categoriasFindUniqueArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categorias that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {categoriasFindUniqueOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoriasFindUniqueOrThrowArgs>(args: SelectSubset<T, categoriasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoriasFindFirstArgs>(args?: SelectSubset<T, categoriasFindFirstArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categorias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoriasFindFirstOrThrowArgs>(args?: SelectSubset<T, categoriasFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categorias.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categorias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriasWithIdOnly = await prisma.categorias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoriasFindManyArgs>(args?: SelectSubset<T, categoriasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categorias.
     * @param {categoriasCreateArgs} args - Arguments to create a Categorias.
     * @example
     * // Create one Categorias
     * const Categorias = await prisma.categorias.create({
     *   data: {
     *     // ... data to create a Categorias
     *   }
     * })
     * 
     */
    create<T extends categoriasCreateArgs>(args: SelectSubset<T, categoriasCreateArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {categoriasCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categorias = await prisma.categorias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoriasCreateManyArgs>(args?: SelectSubset<T, categoriasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorias.
     * @param {categoriasDeleteArgs} args - Arguments to delete one Categorias.
     * @example
     * // Delete one Categorias
     * const Categorias = await prisma.categorias.delete({
     *   where: {
     *     // ... filter to delete one Categorias
     *   }
     * })
     * 
     */
    delete<T extends categoriasDeleteArgs>(args: SelectSubset<T, categoriasDeleteArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categorias.
     * @param {categoriasUpdateArgs} args - Arguments to update one Categorias.
     * @example
     * // Update one Categorias
     * const categorias = await prisma.categorias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoriasUpdateArgs>(args: SelectSubset<T, categoriasUpdateArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {categoriasDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categorias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoriasDeleteManyArgs>(args?: SelectSubset<T, categoriasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categorias = await prisma.categorias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoriasUpdateManyArgs>(args: SelectSubset<T, categoriasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorias.
     * @param {categoriasUpsertArgs} args - Arguments to update or create a Categorias.
     * @example
     * // Update or create a Categorias
     * const categorias = await prisma.categorias.upsert({
     *   create: {
     *     // ... data to create a Categorias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorias we want to update
     *   }
     * })
     */
    upsert<T extends categoriasUpsertArgs>(args: SelectSubset<T, categoriasUpsertArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categorias.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriasCountArgs>(
      args?: Subset<T, categoriasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriasAggregateArgs>(args: Subset<T, CategoriasAggregateArgs>): Prisma.PrismaPromise<GetCategoriasAggregateType<T>>

    /**
     * Group by Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriasGroupByArgs['orderBy'] }
        : { orderBy?: categoriasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categorias model
   */
  readonly fields: categoriasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categorias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the categorias model
   */ 
  interface categoriasFieldRefs {
    readonly id: FieldRef<"categorias", 'Int'>
    readonly nome_categoria: FieldRef<"categorias", 'String'>
    readonly icon_categoria: FieldRef<"categorias", 'String'>
  }
    

  // Custom InputTypes
  /**
   * categorias findUnique
   */
  export type categoriasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias findUniqueOrThrow
   */
  export type categoriasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias findFirst
   */
  export type categoriasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias findFirstOrThrow
   */
  export type categoriasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias findMany
   */
  export type categoriasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias create
   */
  export type categoriasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * The data needed to create a categorias.
     */
    data: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
  }

  /**
   * categorias createMany
   */
  export type categoriasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriasCreateManyInput | categoriasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categorias update
   */
  export type categoriasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * The data needed to update a categorias.
     */
    data: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
    /**
     * Choose, which categorias to update.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias updateMany
   */
  export type categoriasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriasWhereInput
  }

  /**
   * categorias upsert
   */
  export type categoriasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * The filter to search for the categorias to update in case it exists.
     */
    where: categoriasWhereUniqueInput
    /**
     * In case the categorias found by the `where` argument doesn't exist, create a new categorias with this data.
     */
    create: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
    /**
     * In case the categorias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
  }

  /**
   * categorias delete
   */
  export type categoriasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Filter which categorias to delete.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias deleteMany
   */
  export type categoriasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriasWhereInput
  }

  /**
   * categorias without action
   */
  export type categoriasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
  }


  /**
   * Model freelancer_categoria
   */

  export type AggregateFreelancer_categoria = {
    _count: Freelancer_categoriaCountAggregateOutputType | null
    _avg: Freelancer_categoriaAvgAggregateOutputType | null
    _sum: Freelancer_categoriaSumAggregateOutputType | null
    _min: Freelancer_categoriaMinAggregateOutputType | null
    _max: Freelancer_categoriaMaxAggregateOutputType | null
  }

  export type Freelancer_categoriaAvgAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_categoria: number | null
  }

  export type Freelancer_categoriaSumAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_categoria: number | null
  }

  export type Freelancer_categoriaMinAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_categoria: number | null
  }

  export type Freelancer_categoriaMaxAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_categoria: number | null
  }

  export type Freelancer_categoriaCountAggregateOutputType = {
    id: number
    id_freelancer: number
    id_categoria: number
    _all: number
  }


  export type Freelancer_categoriaAvgAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_categoria?: true
  }

  export type Freelancer_categoriaSumAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_categoria?: true
  }

  export type Freelancer_categoriaMinAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_categoria?: true
  }

  export type Freelancer_categoriaMaxAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_categoria?: true
  }

  export type Freelancer_categoriaCountAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_categoria?: true
    _all?: true
  }

  export type Freelancer_categoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which freelancer_categoria to aggregate.
     */
    where?: freelancer_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_categorias to fetch.
     */
    orderBy?: freelancer_categoriaOrderByWithRelationInput | freelancer_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: freelancer_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned freelancer_categorias
    **/
    _count?: true | Freelancer_categoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Freelancer_categoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Freelancer_categoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Freelancer_categoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Freelancer_categoriaMaxAggregateInputType
  }

  export type GetFreelancer_categoriaAggregateType<T extends Freelancer_categoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateFreelancer_categoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFreelancer_categoria[P]>
      : GetScalarType<T[P], AggregateFreelancer_categoria[P]>
  }




  export type freelancer_categoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: freelancer_categoriaWhereInput
    orderBy?: freelancer_categoriaOrderByWithAggregationInput | freelancer_categoriaOrderByWithAggregationInput[]
    by: Freelancer_categoriaScalarFieldEnum[] | Freelancer_categoriaScalarFieldEnum
    having?: freelancer_categoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Freelancer_categoriaCountAggregateInputType | true
    _avg?: Freelancer_categoriaAvgAggregateInputType
    _sum?: Freelancer_categoriaSumAggregateInputType
    _min?: Freelancer_categoriaMinAggregateInputType
    _max?: Freelancer_categoriaMaxAggregateInputType
  }

  export type Freelancer_categoriaGroupByOutputType = {
    id: number
    id_freelancer: number
    id_categoria: number
    _count: Freelancer_categoriaCountAggregateOutputType | null
    _avg: Freelancer_categoriaAvgAggregateOutputType | null
    _sum: Freelancer_categoriaSumAggregateOutputType | null
    _min: Freelancer_categoriaMinAggregateOutputType | null
    _max: Freelancer_categoriaMaxAggregateOutputType | null
  }

  type GetFreelancer_categoriaGroupByPayload<T extends freelancer_categoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Freelancer_categoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Freelancer_categoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Freelancer_categoriaGroupByOutputType[P]>
            : GetScalarType<T[P], Freelancer_categoriaGroupByOutputType[P]>
        }
      >
    >


  export type freelancer_categoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_freelancer?: boolean
    id_categoria?: boolean
  }, ExtArgs["result"]["freelancer_categoria"]>


  export type freelancer_categoriaSelectScalar = {
    id?: boolean
    id_freelancer?: boolean
    id_categoria?: boolean
  }


  export type $freelancer_categoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "freelancer_categoria"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_freelancer: number
      id_categoria: number
    }, ExtArgs["result"]["freelancer_categoria"]>
    composites: {}
  }

  type freelancer_categoriaGetPayload<S extends boolean | null | undefined | freelancer_categoriaDefaultArgs> = $Result.GetResult<Prisma.$freelancer_categoriaPayload, S>

  type freelancer_categoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<freelancer_categoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Freelancer_categoriaCountAggregateInputType | true
    }

  export interface freelancer_categoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['freelancer_categoria'], meta: { name: 'freelancer_categoria' } }
    /**
     * Find zero or one Freelancer_categoria that matches the filter.
     * @param {freelancer_categoriaFindUniqueArgs} args - Arguments to find a Freelancer_categoria
     * @example
     * // Get one Freelancer_categoria
     * const freelancer_categoria = await prisma.freelancer_categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends freelancer_categoriaFindUniqueArgs>(args: SelectSubset<T, freelancer_categoriaFindUniqueArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Freelancer_categoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {freelancer_categoriaFindUniqueOrThrowArgs} args - Arguments to find a Freelancer_categoria
     * @example
     * // Get one Freelancer_categoria
     * const freelancer_categoria = await prisma.freelancer_categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends freelancer_categoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, freelancer_categoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Freelancer_categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_categoriaFindFirstArgs} args - Arguments to find a Freelancer_categoria
     * @example
     * // Get one Freelancer_categoria
     * const freelancer_categoria = await prisma.freelancer_categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends freelancer_categoriaFindFirstArgs>(args?: SelectSubset<T, freelancer_categoriaFindFirstArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Freelancer_categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_categoriaFindFirstOrThrowArgs} args - Arguments to find a Freelancer_categoria
     * @example
     * // Get one Freelancer_categoria
     * const freelancer_categoria = await prisma.freelancer_categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends freelancer_categoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, freelancer_categoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Freelancer_categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_categoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Freelancer_categorias
     * const freelancer_categorias = await prisma.freelancer_categoria.findMany()
     * 
     * // Get first 10 Freelancer_categorias
     * const freelancer_categorias = await prisma.freelancer_categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const freelancer_categoriaWithIdOnly = await prisma.freelancer_categoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends freelancer_categoriaFindManyArgs>(args?: SelectSubset<T, freelancer_categoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Freelancer_categoria.
     * @param {freelancer_categoriaCreateArgs} args - Arguments to create a Freelancer_categoria.
     * @example
     * // Create one Freelancer_categoria
     * const Freelancer_categoria = await prisma.freelancer_categoria.create({
     *   data: {
     *     // ... data to create a Freelancer_categoria
     *   }
     * })
     * 
     */
    create<T extends freelancer_categoriaCreateArgs>(args: SelectSubset<T, freelancer_categoriaCreateArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Freelancer_categorias.
     * @param {freelancer_categoriaCreateManyArgs} args - Arguments to create many Freelancer_categorias.
     * @example
     * // Create many Freelancer_categorias
     * const freelancer_categoria = await prisma.freelancer_categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends freelancer_categoriaCreateManyArgs>(args?: SelectSubset<T, freelancer_categoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Freelancer_categoria.
     * @param {freelancer_categoriaDeleteArgs} args - Arguments to delete one Freelancer_categoria.
     * @example
     * // Delete one Freelancer_categoria
     * const Freelancer_categoria = await prisma.freelancer_categoria.delete({
     *   where: {
     *     // ... filter to delete one Freelancer_categoria
     *   }
     * })
     * 
     */
    delete<T extends freelancer_categoriaDeleteArgs>(args: SelectSubset<T, freelancer_categoriaDeleteArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Freelancer_categoria.
     * @param {freelancer_categoriaUpdateArgs} args - Arguments to update one Freelancer_categoria.
     * @example
     * // Update one Freelancer_categoria
     * const freelancer_categoria = await prisma.freelancer_categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends freelancer_categoriaUpdateArgs>(args: SelectSubset<T, freelancer_categoriaUpdateArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Freelancer_categorias.
     * @param {freelancer_categoriaDeleteManyArgs} args - Arguments to filter Freelancer_categorias to delete.
     * @example
     * // Delete a few Freelancer_categorias
     * const { count } = await prisma.freelancer_categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends freelancer_categoriaDeleteManyArgs>(args?: SelectSubset<T, freelancer_categoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Freelancer_categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_categoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Freelancer_categorias
     * const freelancer_categoria = await prisma.freelancer_categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends freelancer_categoriaUpdateManyArgs>(args: SelectSubset<T, freelancer_categoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Freelancer_categoria.
     * @param {freelancer_categoriaUpsertArgs} args - Arguments to update or create a Freelancer_categoria.
     * @example
     * // Update or create a Freelancer_categoria
     * const freelancer_categoria = await prisma.freelancer_categoria.upsert({
     *   create: {
     *     // ... data to create a Freelancer_categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Freelancer_categoria we want to update
     *   }
     * })
     */
    upsert<T extends freelancer_categoriaUpsertArgs>(args: SelectSubset<T, freelancer_categoriaUpsertArgs<ExtArgs>>): Prisma__freelancer_categoriaClient<$Result.GetResult<Prisma.$freelancer_categoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Freelancer_categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_categoriaCountArgs} args - Arguments to filter Freelancer_categorias to count.
     * @example
     * // Count the number of Freelancer_categorias
     * const count = await prisma.freelancer_categoria.count({
     *   where: {
     *     // ... the filter for the Freelancer_categorias we want to count
     *   }
     * })
    **/
    count<T extends freelancer_categoriaCountArgs>(
      args?: Subset<T, freelancer_categoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Freelancer_categoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Freelancer_categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Freelancer_categoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Freelancer_categoriaAggregateArgs>(args: Subset<T, Freelancer_categoriaAggregateArgs>): Prisma.PrismaPromise<GetFreelancer_categoriaAggregateType<T>>

    /**
     * Group by Freelancer_categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_categoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends freelancer_categoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: freelancer_categoriaGroupByArgs['orderBy'] }
        : { orderBy?: freelancer_categoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, freelancer_categoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreelancer_categoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the freelancer_categoria model
   */
  readonly fields: freelancer_categoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for freelancer_categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__freelancer_categoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the freelancer_categoria model
   */ 
  interface freelancer_categoriaFieldRefs {
    readonly id: FieldRef<"freelancer_categoria", 'Int'>
    readonly id_freelancer: FieldRef<"freelancer_categoria", 'Int'>
    readonly id_categoria: FieldRef<"freelancer_categoria", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * freelancer_categoria findUnique
   */
  export type freelancer_categoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_categoria to fetch.
     */
    where: freelancer_categoriaWhereUniqueInput
  }

  /**
   * freelancer_categoria findUniqueOrThrow
   */
  export type freelancer_categoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_categoria to fetch.
     */
    where: freelancer_categoriaWhereUniqueInput
  }

  /**
   * freelancer_categoria findFirst
   */
  export type freelancer_categoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_categoria to fetch.
     */
    where?: freelancer_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_categorias to fetch.
     */
    orderBy?: freelancer_categoriaOrderByWithRelationInput | freelancer_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for freelancer_categorias.
     */
    cursor?: freelancer_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of freelancer_categorias.
     */
    distinct?: Freelancer_categoriaScalarFieldEnum | Freelancer_categoriaScalarFieldEnum[]
  }

  /**
   * freelancer_categoria findFirstOrThrow
   */
  export type freelancer_categoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_categoria to fetch.
     */
    where?: freelancer_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_categorias to fetch.
     */
    orderBy?: freelancer_categoriaOrderByWithRelationInput | freelancer_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for freelancer_categorias.
     */
    cursor?: freelancer_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of freelancer_categorias.
     */
    distinct?: Freelancer_categoriaScalarFieldEnum | Freelancer_categoriaScalarFieldEnum[]
  }

  /**
   * freelancer_categoria findMany
   */
  export type freelancer_categoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_categorias to fetch.
     */
    where?: freelancer_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_categorias to fetch.
     */
    orderBy?: freelancer_categoriaOrderByWithRelationInput | freelancer_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing freelancer_categorias.
     */
    cursor?: freelancer_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_categorias.
     */
    skip?: number
    distinct?: Freelancer_categoriaScalarFieldEnum | Freelancer_categoriaScalarFieldEnum[]
  }

  /**
   * freelancer_categoria create
   */
  export type freelancer_categoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * The data needed to create a freelancer_categoria.
     */
    data: XOR<freelancer_categoriaCreateInput, freelancer_categoriaUncheckedCreateInput>
  }

  /**
   * freelancer_categoria createMany
   */
  export type freelancer_categoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many freelancer_categorias.
     */
    data: freelancer_categoriaCreateManyInput | freelancer_categoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * freelancer_categoria update
   */
  export type freelancer_categoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * The data needed to update a freelancer_categoria.
     */
    data: XOR<freelancer_categoriaUpdateInput, freelancer_categoriaUncheckedUpdateInput>
    /**
     * Choose, which freelancer_categoria to update.
     */
    where: freelancer_categoriaWhereUniqueInput
  }

  /**
   * freelancer_categoria updateMany
   */
  export type freelancer_categoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update freelancer_categorias.
     */
    data: XOR<freelancer_categoriaUpdateManyMutationInput, freelancer_categoriaUncheckedUpdateManyInput>
    /**
     * Filter which freelancer_categorias to update
     */
    where?: freelancer_categoriaWhereInput
  }

  /**
   * freelancer_categoria upsert
   */
  export type freelancer_categoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * The filter to search for the freelancer_categoria to update in case it exists.
     */
    where: freelancer_categoriaWhereUniqueInput
    /**
     * In case the freelancer_categoria found by the `where` argument doesn't exist, create a new freelancer_categoria with this data.
     */
    create: XOR<freelancer_categoriaCreateInput, freelancer_categoriaUncheckedCreateInput>
    /**
     * In case the freelancer_categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<freelancer_categoriaUpdateInput, freelancer_categoriaUncheckedUpdateInput>
  }

  /**
   * freelancer_categoria delete
   */
  export type freelancer_categoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
    /**
     * Filter which freelancer_categoria to delete.
     */
    where: freelancer_categoriaWhereUniqueInput
  }

  /**
   * freelancer_categoria deleteMany
   */
  export type freelancer_categoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which freelancer_categorias to delete
     */
    where?: freelancer_categoriaWhereInput
  }

  /**
   * freelancer_categoria without action
   */
  export type freelancer_categoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_categoria
     */
    select?: freelancer_categoriaSelect<ExtArgs> | null
  }


  /**
   * Model freelancer_habilidade
   */

  export type AggregateFreelancer_habilidade = {
    _count: Freelancer_habilidadeCountAggregateOutputType | null
    _avg: Freelancer_habilidadeAvgAggregateOutputType | null
    _sum: Freelancer_habilidadeSumAggregateOutputType | null
    _min: Freelancer_habilidadeMinAggregateOutputType | null
    _max: Freelancer_habilidadeMaxAggregateOutputType | null
  }

  export type Freelancer_habilidadeAvgAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_habilidade: number | null
  }

  export type Freelancer_habilidadeSumAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_habilidade: number | null
  }

  export type Freelancer_habilidadeMinAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_habilidade: number | null
  }

  export type Freelancer_habilidadeMaxAggregateOutputType = {
    id: number | null
    id_freelancer: number | null
    id_habilidade: number | null
  }

  export type Freelancer_habilidadeCountAggregateOutputType = {
    id: number
    id_freelancer: number
    id_habilidade: number
    _all: number
  }


  export type Freelancer_habilidadeAvgAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_habilidade?: true
  }

  export type Freelancer_habilidadeSumAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_habilidade?: true
  }

  export type Freelancer_habilidadeMinAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_habilidade?: true
  }

  export type Freelancer_habilidadeMaxAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_habilidade?: true
  }

  export type Freelancer_habilidadeCountAggregateInputType = {
    id?: true
    id_freelancer?: true
    id_habilidade?: true
    _all?: true
  }

  export type Freelancer_habilidadeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which freelancer_habilidade to aggregate.
     */
    where?: freelancer_habilidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_habilidades to fetch.
     */
    orderBy?: freelancer_habilidadeOrderByWithRelationInput | freelancer_habilidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: freelancer_habilidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_habilidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned freelancer_habilidades
    **/
    _count?: true | Freelancer_habilidadeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Freelancer_habilidadeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Freelancer_habilidadeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Freelancer_habilidadeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Freelancer_habilidadeMaxAggregateInputType
  }

  export type GetFreelancer_habilidadeAggregateType<T extends Freelancer_habilidadeAggregateArgs> = {
        [P in keyof T & keyof AggregateFreelancer_habilidade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFreelancer_habilidade[P]>
      : GetScalarType<T[P], AggregateFreelancer_habilidade[P]>
  }




  export type freelancer_habilidadeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: freelancer_habilidadeWhereInput
    orderBy?: freelancer_habilidadeOrderByWithAggregationInput | freelancer_habilidadeOrderByWithAggregationInput[]
    by: Freelancer_habilidadeScalarFieldEnum[] | Freelancer_habilidadeScalarFieldEnum
    having?: freelancer_habilidadeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Freelancer_habilidadeCountAggregateInputType | true
    _avg?: Freelancer_habilidadeAvgAggregateInputType
    _sum?: Freelancer_habilidadeSumAggregateInputType
    _min?: Freelancer_habilidadeMinAggregateInputType
    _max?: Freelancer_habilidadeMaxAggregateInputType
  }

  export type Freelancer_habilidadeGroupByOutputType = {
    id: number
    id_freelancer: number
    id_habilidade: number
    _count: Freelancer_habilidadeCountAggregateOutputType | null
    _avg: Freelancer_habilidadeAvgAggregateOutputType | null
    _sum: Freelancer_habilidadeSumAggregateOutputType | null
    _min: Freelancer_habilidadeMinAggregateOutputType | null
    _max: Freelancer_habilidadeMaxAggregateOutputType | null
  }

  type GetFreelancer_habilidadeGroupByPayload<T extends freelancer_habilidadeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Freelancer_habilidadeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Freelancer_habilidadeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Freelancer_habilidadeGroupByOutputType[P]>
            : GetScalarType<T[P], Freelancer_habilidadeGroupByOutputType[P]>
        }
      >
    >


  export type freelancer_habilidadeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_freelancer?: boolean
    id_habilidade?: boolean
  }, ExtArgs["result"]["freelancer_habilidade"]>


  export type freelancer_habilidadeSelectScalar = {
    id?: boolean
    id_freelancer?: boolean
    id_habilidade?: boolean
  }


  export type $freelancer_habilidadePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "freelancer_habilidade"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_freelancer: number
      id_habilidade: number
    }, ExtArgs["result"]["freelancer_habilidade"]>
    composites: {}
  }

  type freelancer_habilidadeGetPayload<S extends boolean | null | undefined | freelancer_habilidadeDefaultArgs> = $Result.GetResult<Prisma.$freelancer_habilidadePayload, S>

  type freelancer_habilidadeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<freelancer_habilidadeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Freelancer_habilidadeCountAggregateInputType | true
    }

  export interface freelancer_habilidadeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['freelancer_habilidade'], meta: { name: 'freelancer_habilidade' } }
    /**
     * Find zero or one Freelancer_habilidade that matches the filter.
     * @param {freelancer_habilidadeFindUniqueArgs} args - Arguments to find a Freelancer_habilidade
     * @example
     * // Get one Freelancer_habilidade
     * const freelancer_habilidade = await prisma.freelancer_habilidade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends freelancer_habilidadeFindUniqueArgs>(args: SelectSubset<T, freelancer_habilidadeFindUniqueArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Freelancer_habilidade that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {freelancer_habilidadeFindUniqueOrThrowArgs} args - Arguments to find a Freelancer_habilidade
     * @example
     * // Get one Freelancer_habilidade
     * const freelancer_habilidade = await prisma.freelancer_habilidade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends freelancer_habilidadeFindUniqueOrThrowArgs>(args: SelectSubset<T, freelancer_habilidadeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Freelancer_habilidade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_habilidadeFindFirstArgs} args - Arguments to find a Freelancer_habilidade
     * @example
     * // Get one Freelancer_habilidade
     * const freelancer_habilidade = await prisma.freelancer_habilidade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends freelancer_habilidadeFindFirstArgs>(args?: SelectSubset<T, freelancer_habilidadeFindFirstArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Freelancer_habilidade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_habilidadeFindFirstOrThrowArgs} args - Arguments to find a Freelancer_habilidade
     * @example
     * // Get one Freelancer_habilidade
     * const freelancer_habilidade = await prisma.freelancer_habilidade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends freelancer_habilidadeFindFirstOrThrowArgs>(args?: SelectSubset<T, freelancer_habilidadeFindFirstOrThrowArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Freelancer_habilidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_habilidadeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Freelancer_habilidades
     * const freelancer_habilidades = await prisma.freelancer_habilidade.findMany()
     * 
     * // Get first 10 Freelancer_habilidades
     * const freelancer_habilidades = await prisma.freelancer_habilidade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const freelancer_habilidadeWithIdOnly = await prisma.freelancer_habilidade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends freelancer_habilidadeFindManyArgs>(args?: SelectSubset<T, freelancer_habilidadeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Freelancer_habilidade.
     * @param {freelancer_habilidadeCreateArgs} args - Arguments to create a Freelancer_habilidade.
     * @example
     * // Create one Freelancer_habilidade
     * const Freelancer_habilidade = await prisma.freelancer_habilidade.create({
     *   data: {
     *     // ... data to create a Freelancer_habilidade
     *   }
     * })
     * 
     */
    create<T extends freelancer_habilidadeCreateArgs>(args: SelectSubset<T, freelancer_habilidadeCreateArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Freelancer_habilidades.
     * @param {freelancer_habilidadeCreateManyArgs} args - Arguments to create many Freelancer_habilidades.
     * @example
     * // Create many Freelancer_habilidades
     * const freelancer_habilidade = await prisma.freelancer_habilidade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends freelancer_habilidadeCreateManyArgs>(args?: SelectSubset<T, freelancer_habilidadeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Freelancer_habilidade.
     * @param {freelancer_habilidadeDeleteArgs} args - Arguments to delete one Freelancer_habilidade.
     * @example
     * // Delete one Freelancer_habilidade
     * const Freelancer_habilidade = await prisma.freelancer_habilidade.delete({
     *   where: {
     *     // ... filter to delete one Freelancer_habilidade
     *   }
     * })
     * 
     */
    delete<T extends freelancer_habilidadeDeleteArgs>(args: SelectSubset<T, freelancer_habilidadeDeleteArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Freelancer_habilidade.
     * @param {freelancer_habilidadeUpdateArgs} args - Arguments to update one Freelancer_habilidade.
     * @example
     * // Update one Freelancer_habilidade
     * const freelancer_habilidade = await prisma.freelancer_habilidade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends freelancer_habilidadeUpdateArgs>(args: SelectSubset<T, freelancer_habilidadeUpdateArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Freelancer_habilidades.
     * @param {freelancer_habilidadeDeleteManyArgs} args - Arguments to filter Freelancer_habilidades to delete.
     * @example
     * // Delete a few Freelancer_habilidades
     * const { count } = await prisma.freelancer_habilidade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends freelancer_habilidadeDeleteManyArgs>(args?: SelectSubset<T, freelancer_habilidadeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Freelancer_habilidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_habilidadeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Freelancer_habilidades
     * const freelancer_habilidade = await prisma.freelancer_habilidade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends freelancer_habilidadeUpdateManyArgs>(args: SelectSubset<T, freelancer_habilidadeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Freelancer_habilidade.
     * @param {freelancer_habilidadeUpsertArgs} args - Arguments to update or create a Freelancer_habilidade.
     * @example
     * // Update or create a Freelancer_habilidade
     * const freelancer_habilidade = await prisma.freelancer_habilidade.upsert({
     *   create: {
     *     // ... data to create a Freelancer_habilidade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Freelancer_habilidade we want to update
     *   }
     * })
     */
    upsert<T extends freelancer_habilidadeUpsertArgs>(args: SelectSubset<T, freelancer_habilidadeUpsertArgs<ExtArgs>>): Prisma__freelancer_habilidadeClient<$Result.GetResult<Prisma.$freelancer_habilidadePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Freelancer_habilidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_habilidadeCountArgs} args - Arguments to filter Freelancer_habilidades to count.
     * @example
     * // Count the number of Freelancer_habilidades
     * const count = await prisma.freelancer_habilidade.count({
     *   where: {
     *     // ... the filter for the Freelancer_habilidades we want to count
     *   }
     * })
    **/
    count<T extends freelancer_habilidadeCountArgs>(
      args?: Subset<T, freelancer_habilidadeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Freelancer_habilidadeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Freelancer_habilidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Freelancer_habilidadeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Freelancer_habilidadeAggregateArgs>(args: Subset<T, Freelancer_habilidadeAggregateArgs>): Prisma.PrismaPromise<GetFreelancer_habilidadeAggregateType<T>>

    /**
     * Group by Freelancer_habilidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {freelancer_habilidadeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends freelancer_habilidadeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: freelancer_habilidadeGroupByArgs['orderBy'] }
        : { orderBy?: freelancer_habilidadeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, freelancer_habilidadeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreelancer_habilidadeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the freelancer_habilidade model
   */
  readonly fields: freelancer_habilidadeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for freelancer_habilidade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__freelancer_habilidadeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the freelancer_habilidade model
   */ 
  interface freelancer_habilidadeFieldRefs {
    readonly id: FieldRef<"freelancer_habilidade", 'Int'>
    readonly id_freelancer: FieldRef<"freelancer_habilidade", 'Int'>
    readonly id_habilidade: FieldRef<"freelancer_habilidade", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * freelancer_habilidade findUnique
   */
  export type freelancer_habilidadeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_habilidade to fetch.
     */
    where: freelancer_habilidadeWhereUniqueInput
  }

  /**
   * freelancer_habilidade findUniqueOrThrow
   */
  export type freelancer_habilidadeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_habilidade to fetch.
     */
    where: freelancer_habilidadeWhereUniqueInput
  }

  /**
   * freelancer_habilidade findFirst
   */
  export type freelancer_habilidadeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_habilidade to fetch.
     */
    where?: freelancer_habilidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_habilidades to fetch.
     */
    orderBy?: freelancer_habilidadeOrderByWithRelationInput | freelancer_habilidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for freelancer_habilidades.
     */
    cursor?: freelancer_habilidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_habilidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of freelancer_habilidades.
     */
    distinct?: Freelancer_habilidadeScalarFieldEnum | Freelancer_habilidadeScalarFieldEnum[]
  }

  /**
   * freelancer_habilidade findFirstOrThrow
   */
  export type freelancer_habilidadeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_habilidade to fetch.
     */
    where?: freelancer_habilidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_habilidades to fetch.
     */
    orderBy?: freelancer_habilidadeOrderByWithRelationInput | freelancer_habilidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for freelancer_habilidades.
     */
    cursor?: freelancer_habilidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_habilidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of freelancer_habilidades.
     */
    distinct?: Freelancer_habilidadeScalarFieldEnum | Freelancer_habilidadeScalarFieldEnum[]
  }

  /**
   * freelancer_habilidade findMany
   */
  export type freelancer_habilidadeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * Filter, which freelancer_habilidades to fetch.
     */
    where?: freelancer_habilidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of freelancer_habilidades to fetch.
     */
    orderBy?: freelancer_habilidadeOrderByWithRelationInput | freelancer_habilidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing freelancer_habilidades.
     */
    cursor?: freelancer_habilidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` freelancer_habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` freelancer_habilidades.
     */
    skip?: number
    distinct?: Freelancer_habilidadeScalarFieldEnum | Freelancer_habilidadeScalarFieldEnum[]
  }

  /**
   * freelancer_habilidade create
   */
  export type freelancer_habilidadeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * The data needed to create a freelancer_habilidade.
     */
    data: XOR<freelancer_habilidadeCreateInput, freelancer_habilidadeUncheckedCreateInput>
  }

  /**
   * freelancer_habilidade createMany
   */
  export type freelancer_habilidadeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many freelancer_habilidades.
     */
    data: freelancer_habilidadeCreateManyInput | freelancer_habilidadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * freelancer_habilidade update
   */
  export type freelancer_habilidadeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * The data needed to update a freelancer_habilidade.
     */
    data: XOR<freelancer_habilidadeUpdateInput, freelancer_habilidadeUncheckedUpdateInput>
    /**
     * Choose, which freelancer_habilidade to update.
     */
    where: freelancer_habilidadeWhereUniqueInput
  }

  /**
   * freelancer_habilidade updateMany
   */
  export type freelancer_habilidadeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update freelancer_habilidades.
     */
    data: XOR<freelancer_habilidadeUpdateManyMutationInput, freelancer_habilidadeUncheckedUpdateManyInput>
    /**
     * Filter which freelancer_habilidades to update
     */
    where?: freelancer_habilidadeWhereInput
  }

  /**
   * freelancer_habilidade upsert
   */
  export type freelancer_habilidadeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * The filter to search for the freelancer_habilidade to update in case it exists.
     */
    where: freelancer_habilidadeWhereUniqueInput
    /**
     * In case the freelancer_habilidade found by the `where` argument doesn't exist, create a new freelancer_habilidade with this data.
     */
    create: XOR<freelancer_habilidadeCreateInput, freelancer_habilidadeUncheckedCreateInput>
    /**
     * In case the freelancer_habilidade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<freelancer_habilidadeUpdateInput, freelancer_habilidadeUncheckedUpdateInput>
  }

  /**
   * freelancer_habilidade delete
   */
  export type freelancer_habilidadeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
    /**
     * Filter which freelancer_habilidade to delete.
     */
    where: freelancer_habilidadeWhereUniqueInput
  }

  /**
   * freelancer_habilidade deleteMany
   */
  export type freelancer_habilidadeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which freelancer_habilidades to delete
     */
    where?: freelancer_habilidadeWhereInput
  }

  /**
   * freelancer_habilidade without action
   */
  export type freelancer_habilidadeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the freelancer_habilidade
     */
    select?: freelancer_habilidadeSelect<ExtArgs> | null
  }


  /**
   * Model habilidades
   */

  export type AggregateHabilidades = {
    _count: HabilidadesCountAggregateOutputType | null
    _avg: HabilidadesAvgAggregateOutputType | null
    _sum: HabilidadesSumAggregateOutputType | null
    _min: HabilidadesMinAggregateOutputType | null
    _max: HabilidadesMaxAggregateOutputType | null
  }

  export type HabilidadesAvgAggregateOutputType = {
    id: number | null
  }

  export type HabilidadesSumAggregateOutputType = {
    id: number | null
  }

  export type HabilidadesMinAggregateOutputType = {
    id: number | null
    nome_habilidade: string | null
    icon_habilidade: string | null
  }

  export type HabilidadesMaxAggregateOutputType = {
    id: number | null
    nome_habilidade: string | null
    icon_habilidade: string | null
  }

  export type HabilidadesCountAggregateOutputType = {
    id: number
    nome_habilidade: number
    icon_habilidade: number
    _all: number
  }


  export type HabilidadesAvgAggregateInputType = {
    id?: true
  }

  export type HabilidadesSumAggregateInputType = {
    id?: true
  }

  export type HabilidadesMinAggregateInputType = {
    id?: true
    nome_habilidade?: true
    icon_habilidade?: true
  }

  export type HabilidadesMaxAggregateInputType = {
    id?: true
    nome_habilidade?: true
    icon_habilidade?: true
  }

  export type HabilidadesCountAggregateInputType = {
    id?: true
    nome_habilidade?: true
    icon_habilidade?: true
    _all?: true
  }

  export type HabilidadesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which habilidades to aggregate.
     */
    where?: habilidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habilidades to fetch.
     */
    orderBy?: habilidadesOrderByWithRelationInput | habilidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: habilidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habilidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned habilidades
    **/
    _count?: true | HabilidadesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HabilidadesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HabilidadesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabilidadesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabilidadesMaxAggregateInputType
  }

  export type GetHabilidadesAggregateType<T extends HabilidadesAggregateArgs> = {
        [P in keyof T & keyof AggregateHabilidades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabilidades[P]>
      : GetScalarType<T[P], AggregateHabilidades[P]>
  }




  export type habilidadesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: habilidadesWhereInput
    orderBy?: habilidadesOrderByWithAggregationInput | habilidadesOrderByWithAggregationInput[]
    by: HabilidadesScalarFieldEnum[] | HabilidadesScalarFieldEnum
    having?: habilidadesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabilidadesCountAggregateInputType | true
    _avg?: HabilidadesAvgAggregateInputType
    _sum?: HabilidadesSumAggregateInputType
    _min?: HabilidadesMinAggregateInputType
    _max?: HabilidadesMaxAggregateInputType
  }

  export type HabilidadesGroupByOutputType = {
    id: number
    nome_habilidade: string
    icon_habilidade: string
    _count: HabilidadesCountAggregateOutputType | null
    _avg: HabilidadesAvgAggregateOutputType | null
    _sum: HabilidadesSumAggregateOutputType | null
    _min: HabilidadesMinAggregateOutputType | null
    _max: HabilidadesMaxAggregateOutputType | null
  }

  type GetHabilidadesGroupByPayload<T extends habilidadesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HabilidadesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabilidadesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabilidadesGroupByOutputType[P]>
            : GetScalarType<T[P], HabilidadesGroupByOutputType[P]>
        }
      >
    >


  export type habilidadesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_habilidade?: boolean
    icon_habilidade?: boolean
  }, ExtArgs["result"]["habilidades"]>


  export type habilidadesSelectScalar = {
    id?: boolean
    nome_habilidade?: boolean
    icon_habilidade?: boolean
  }


  export type $habilidadesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "habilidades"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome_habilidade: string
      icon_habilidade: string
    }, ExtArgs["result"]["habilidades"]>
    composites: {}
  }

  type habilidadesGetPayload<S extends boolean | null | undefined | habilidadesDefaultArgs> = $Result.GetResult<Prisma.$habilidadesPayload, S>

  type habilidadesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<habilidadesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HabilidadesCountAggregateInputType | true
    }

  export interface habilidadesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['habilidades'], meta: { name: 'habilidades' } }
    /**
     * Find zero or one Habilidades that matches the filter.
     * @param {habilidadesFindUniqueArgs} args - Arguments to find a Habilidades
     * @example
     * // Get one Habilidades
     * const habilidades = await prisma.habilidades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends habilidadesFindUniqueArgs>(args: SelectSubset<T, habilidadesFindUniqueArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Habilidades that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {habilidadesFindUniqueOrThrowArgs} args - Arguments to find a Habilidades
     * @example
     * // Get one Habilidades
     * const habilidades = await prisma.habilidades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends habilidadesFindUniqueOrThrowArgs>(args: SelectSubset<T, habilidadesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Habilidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habilidadesFindFirstArgs} args - Arguments to find a Habilidades
     * @example
     * // Get one Habilidades
     * const habilidades = await prisma.habilidades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends habilidadesFindFirstArgs>(args?: SelectSubset<T, habilidadesFindFirstArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Habilidades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habilidadesFindFirstOrThrowArgs} args - Arguments to find a Habilidades
     * @example
     * // Get one Habilidades
     * const habilidades = await prisma.habilidades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends habilidadesFindFirstOrThrowArgs>(args?: SelectSubset<T, habilidadesFindFirstOrThrowArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Habilidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habilidadesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habilidades
     * const habilidades = await prisma.habilidades.findMany()
     * 
     * // Get first 10 Habilidades
     * const habilidades = await prisma.habilidades.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habilidadesWithIdOnly = await prisma.habilidades.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends habilidadesFindManyArgs>(args?: SelectSubset<T, habilidadesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Habilidades.
     * @param {habilidadesCreateArgs} args - Arguments to create a Habilidades.
     * @example
     * // Create one Habilidades
     * const Habilidades = await prisma.habilidades.create({
     *   data: {
     *     // ... data to create a Habilidades
     *   }
     * })
     * 
     */
    create<T extends habilidadesCreateArgs>(args: SelectSubset<T, habilidadesCreateArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Habilidades.
     * @param {habilidadesCreateManyArgs} args - Arguments to create many Habilidades.
     * @example
     * // Create many Habilidades
     * const habilidades = await prisma.habilidades.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends habilidadesCreateManyArgs>(args?: SelectSubset<T, habilidadesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Habilidades.
     * @param {habilidadesDeleteArgs} args - Arguments to delete one Habilidades.
     * @example
     * // Delete one Habilidades
     * const Habilidades = await prisma.habilidades.delete({
     *   where: {
     *     // ... filter to delete one Habilidades
     *   }
     * })
     * 
     */
    delete<T extends habilidadesDeleteArgs>(args: SelectSubset<T, habilidadesDeleteArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Habilidades.
     * @param {habilidadesUpdateArgs} args - Arguments to update one Habilidades.
     * @example
     * // Update one Habilidades
     * const habilidades = await prisma.habilidades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends habilidadesUpdateArgs>(args: SelectSubset<T, habilidadesUpdateArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Habilidades.
     * @param {habilidadesDeleteManyArgs} args - Arguments to filter Habilidades to delete.
     * @example
     * // Delete a few Habilidades
     * const { count } = await prisma.habilidades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends habilidadesDeleteManyArgs>(args?: SelectSubset<T, habilidadesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habilidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habilidadesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habilidades
     * const habilidades = await prisma.habilidades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends habilidadesUpdateManyArgs>(args: SelectSubset<T, habilidadesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Habilidades.
     * @param {habilidadesUpsertArgs} args - Arguments to update or create a Habilidades.
     * @example
     * // Update or create a Habilidades
     * const habilidades = await prisma.habilidades.upsert({
     *   create: {
     *     // ... data to create a Habilidades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habilidades we want to update
     *   }
     * })
     */
    upsert<T extends habilidadesUpsertArgs>(args: SelectSubset<T, habilidadesUpsertArgs<ExtArgs>>): Prisma__habilidadesClient<$Result.GetResult<Prisma.$habilidadesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Habilidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habilidadesCountArgs} args - Arguments to filter Habilidades to count.
     * @example
     * // Count the number of Habilidades
     * const count = await prisma.habilidades.count({
     *   where: {
     *     // ... the filter for the Habilidades we want to count
     *   }
     * })
    **/
    count<T extends habilidadesCountArgs>(
      args?: Subset<T, habilidadesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabilidadesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habilidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilidadesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabilidadesAggregateArgs>(args: Subset<T, HabilidadesAggregateArgs>): Prisma.PrismaPromise<GetHabilidadesAggregateType<T>>

    /**
     * Group by Habilidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habilidadesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends habilidadesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: habilidadesGroupByArgs['orderBy'] }
        : { orderBy?: habilidadesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, habilidadesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabilidadesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the habilidades model
   */
  readonly fields: habilidadesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for habilidades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__habilidadesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the habilidades model
   */ 
  interface habilidadesFieldRefs {
    readonly id: FieldRef<"habilidades", 'Int'>
    readonly nome_habilidade: FieldRef<"habilidades", 'String'>
    readonly icon_habilidade: FieldRef<"habilidades", 'String'>
  }
    

  // Custom InputTypes
  /**
   * habilidades findUnique
   */
  export type habilidadesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * Filter, which habilidades to fetch.
     */
    where: habilidadesWhereUniqueInput
  }

  /**
   * habilidades findUniqueOrThrow
   */
  export type habilidadesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * Filter, which habilidades to fetch.
     */
    where: habilidadesWhereUniqueInput
  }

  /**
   * habilidades findFirst
   */
  export type habilidadesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * Filter, which habilidades to fetch.
     */
    where?: habilidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habilidades to fetch.
     */
    orderBy?: habilidadesOrderByWithRelationInput | habilidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for habilidades.
     */
    cursor?: habilidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habilidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of habilidades.
     */
    distinct?: HabilidadesScalarFieldEnum | HabilidadesScalarFieldEnum[]
  }

  /**
   * habilidades findFirstOrThrow
   */
  export type habilidadesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * Filter, which habilidades to fetch.
     */
    where?: habilidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habilidades to fetch.
     */
    orderBy?: habilidadesOrderByWithRelationInput | habilidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for habilidades.
     */
    cursor?: habilidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habilidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of habilidades.
     */
    distinct?: HabilidadesScalarFieldEnum | HabilidadesScalarFieldEnum[]
  }

  /**
   * habilidades findMany
   */
  export type habilidadesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * Filter, which habilidades to fetch.
     */
    where?: habilidadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habilidades to fetch.
     */
    orderBy?: habilidadesOrderByWithRelationInput | habilidadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing habilidades.
     */
    cursor?: habilidadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habilidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habilidades.
     */
    skip?: number
    distinct?: HabilidadesScalarFieldEnum | HabilidadesScalarFieldEnum[]
  }

  /**
   * habilidades create
   */
  export type habilidadesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * The data needed to create a habilidades.
     */
    data: XOR<habilidadesCreateInput, habilidadesUncheckedCreateInput>
  }

  /**
   * habilidades createMany
   */
  export type habilidadesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many habilidades.
     */
    data: habilidadesCreateManyInput | habilidadesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * habilidades update
   */
  export type habilidadesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * The data needed to update a habilidades.
     */
    data: XOR<habilidadesUpdateInput, habilidadesUncheckedUpdateInput>
    /**
     * Choose, which habilidades to update.
     */
    where: habilidadesWhereUniqueInput
  }

  /**
   * habilidades updateMany
   */
  export type habilidadesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update habilidades.
     */
    data: XOR<habilidadesUpdateManyMutationInput, habilidadesUncheckedUpdateManyInput>
    /**
     * Filter which habilidades to update
     */
    where?: habilidadesWhereInput
  }

  /**
   * habilidades upsert
   */
  export type habilidadesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * The filter to search for the habilidades to update in case it exists.
     */
    where: habilidadesWhereUniqueInput
    /**
     * In case the habilidades found by the `where` argument doesn't exist, create a new habilidades with this data.
     */
    create: XOR<habilidadesCreateInput, habilidadesUncheckedCreateInput>
    /**
     * In case the habilidades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<habilidadesUpdateInput, habilidadesUncheckedUpdateInput>
  }

  /**
   * habilidades delete
   */
  export type habilidadesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
    /**
     * Filter which habilidades to delete.
     */
    where: habilidadesWhereUniqueInput
  }

  /**
   * habilidades deleteMany
   */
  export type habilidadesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which habilidades to delete
     */
    where?: habilidadesWhereInput
  }

  /**
   * habilidades without action
   */
  export type habilidadesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habilidades
     */
    select?: habilidadesSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Cadastro_clienteScalarFieldEnum: {
    id: 'id',
    nome_cliente: 'nome_cliente',
    cnpj_cliente: 'cnpj_cliente',
    email_cliente: 'email_cliente',
    senha_cliente: 'senha_cliente',
    is_premium: 'is_premium'
  };

  export type Cadastro_clienteScalarFieldEnum = (typeof Cadastro_clienteScalarFieldEnum)[keyof typeof Cadastro_clienteScalarFieldEnum]


  export const Cadastro_freelancerScalarFieldEnum: {
    id: 'id',
    nome_freelancer: 'nome_freelancer',
    data_nascimento: 'data_nascimento',
    cpf_freelancer: 'cpf_freelancer',
    email_freelancer: 'email_freelancer',
    senha_freelancer: 'senha_freelancer',
    is_premium: 'is_premium'
  };

  export type Cadastro_freelancerScalarFieldEnum = (typeof Cadastro_freelancerScalarFieldEnum)[keyof typeof Cadastro_freelancerScalarFieldEnum]


  export const CategoriasScalarFieldEnum: {
    id: 'id',
    nome_categoria: 'nome_categoria',
    icon_categoria: 'icon_categoria'
  };

  export type CategoriasScalarFieldEnum = (typeof CategoriasScalarFieldEnum)[keyof typeof CategoriasScalarFieldEnum]


  export const Freelancer_categoriaScalarFieldEnum: {
    id: 'id',
    id_freelancer: 'id_freelancer',
    id_categoria: 'id_categoria'
  };

  export type Freelancer_categoriaScalarFieldEnum = (typeof Freelancer_categoriaScalarFieldEnum)[keyof typeof Freelancer_categoriaScalarFieldEnum]


  export const Freelancer_habilidadeScalarFieldEnum: {
    id: 'id',
    id_freelancer: 'id_freelancer',
    id_habilidade: 'id_habilidade'
  };

  export type Freelancer_habilidadeScalarFieldEnum = (typeof Freelancer_habilidadeScalarFieldEnum)[keyof typeof Freelancer_habilidadeScalarFieldEnum]


  export const HabilidadesScalarFieldEnum: {
    id: 'id',
    nome_habilidade: 'nome_habilidade',
    icon_habilidade: 'icon_habilidade'
  };

  export type HabilidadesScalarFieldEnum = (typeof HabilidadesScalarFieldEnum)[keyof typeof HabilidadesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type cadastro_clienteWhereInput = {
    AND?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    OR?: cadastro_clienteWhereInput[]
    NOT?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    id?: IntFilter<"cadastro_cliente"> | number
    nome_cliente?: StringFilter<"cadastro_cliente"> | string
    cnpj_cliente?: BigIntFilter<"cadastro_cliente"> | bigint | number
    email_cliente?: StringFilter<"cadastro_cliente"> | string
    senha_cliente?: StringFilter<"cadastro_cliente"> | string
    is_premium?: BoolFilter<"cadastro_cliente"> | boolean
  }

  export type cadastro_clienteOrderByWithRelationInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_clienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    OR?: cadastro_clienteWhereInput[]
    NOT?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    nome_cliente?: StringFilter<"cadastro_cliente"> | string
    cnpj_cliente?: BigIntFilter<"cadastro_cliente"> | bigint | number
    email_cliente?: StringFilter<"cadastro_cliente"> | string
    senha_cliente?: StringFilter<"cadastro_cliente"> | string
    is_premium?: BoolFilter<"cadastro_cliente"> | boolean
  }, "id" | "id">

  export type cadastro_clienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
    is_premium?: SortOrder
    _count?: cadastro_clienteCountOrderByAggregateInput
    _avg?: cadastro_clienteAvgOrderByAggregateInput
    _max?: cadastro_clienteMaxOrderByAggregateInput
    _min?: cadastro_clienteMinOrderByAggregateInput
    _sum?: cadastro_clienteSumOrderByAggregateInput
  }

  export type cadastro_clienteScalarWhereWithAggregatesInput = {
    AND?: cadastro_clienteScalarWhereWithAggregatesInput | cadastro_clienteScalarWhereWithAggregatesInput[]
    OR?: cadastro_clienteScalarWhereWithAggregatesInput[]
    NOT?: cadastro_clienteScalarWhereWithAggregatesInput | cadastro_clienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cadastro_cliente"> | number
    nome_cliente?: StringWithAggregatesFilter<"cadastro_cliente"> | string
    cnpj_cliente?: BigIntWithAggregatesFilter<"cadastro_cliente"> | bigint | number
    email_cliente?: StringWithAggregatesFilter<"cadastro_cliente"> | string
    senha_cliente?: StringWithAggregatesFilter<"cadastro_cliente"> | string
    is_premium?: BoolWithAggregatesFilter<"cadastro_cliente"> | boolean
  }

  export type cadastro_freelancerWhereInput = {
    AND?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    OR?: cadastro_freelancerWhereInput[]
    NOT?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    id?: IntFilter<"cadastro_freelancer"> | number
    nome_freelancer?: StringFilter<"cadastro_freelancer"> | string
    data_nascimento?: DateTimeFilter<"cadastro_freelancer"> | Date | string
    cpf_freelancer?: BigIntFilter<"cadastro_freelancer"> | bigint | number
    email_freelancer?: StringFilter<"cadastro_freelancer"> | string
    senha_freelancer?: StringFilter<"cadastro_freelancer"> | string
    is_premium?: BoolFilter<"cadastro_freelancer"> | boolean
  }

  export type cadastro_freelancerOrderByWithRelationInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_freelancerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    OR?: cadastro_freelancerWhereInput[]
    NOT?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    nome_freelancer?: StringFilter<"cadastro_freelancer"> | string
    data_nascimento?: DateTimeFilter<"cadastro_freelancer"> | Date | string
    cpf_freelancer?: BigIntFilter<"cadastro_freelancer"> | bigint | number
    email_freelancer?: StringFilter<"cadastro_freelancer"> | string
    senha_freelancer?: StringFilter<"cadastro_freelancer"> | string
    is_premium?: BoolFilter<"cadastro_freelancer"> | boolean
  }, "id" | "id">

  export type cadastro_freelancerOrderByWithAggregationInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
    is_premium?: SortOrder
    _count?: cadastro_freelancerCountOrderByAggregateInput
    _avg?: cadastro_freelancerAvgOrderByAggregateInput
    _max?: cadastro_freelancerMaxOrderByAggregateInput
    _min?: cadastro_freelancerMinOrderByAggregateInput
    _sum?: cadastro_freelancerSumOrderByAggregateInput
  }

  export type cadastro_freelancerScalarWhereWithAggregatesInput = {
    AND?: cadastro_freelancerScalarWhereWithAggregatesInput | cadastro_freelancerScalarWhereWithAggregatesInput[]
    OR?: cadastro_freelancerScalarWhereWithAggregatesInput[]
    NOT?: cadastro_freelancerScalarWhereWithAggregatesInput | cadastro_freelancerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cadastro_freelancer"> | number
    nome_freelancer?: StringWithAggregatesFilter<"cadastro_freelancer"> | string
    data_nascimento?: DateTimeWithAggregatesFilter<"cadastro_freelancer"> | Date | string
    cpf_freelancer?: BigIntWithAggregatesFilter<"cadastro_freelancer"> | bigint | number
    email_freelancer?: StringWithAggregatesFilter<"cadastro_freelancer"> | string
    senha_freelancer?: StringWithAggregatesFilter<"cadastro_freelancer"> | string
    is_premium?: BoolWithAggregatesFilter<"cadastro_freelancer"> | boolean
  }

  export type categoriasWhereInput = {
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    id?: IntFilter<"categorias"> | number
    nome_categoria?: StringFilter<"categorias"> | string
    icon_categoria?: StringFilter<"categorias"> | string
  }

  export type categoriasOrderByWithRelationInput = {
    id?: SortOrder
    nome_categoria?: SortOrder
    icon_categoria?: SortOrder
  }

  export type categoriasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    nome_categoria?: StringFilter<"categorias"> | string
    icon_categoria?: StringFilter<"categorias"> | string
  }, "id" | "id">

  export type categoriasOrderByWithAggregationInput = {
    id?: SortOrder
    nome_categoria?: SortOrder
    icon_categoria?: SortOrder
    _count?: categoriasCountOrderByAggregateInput
    _avg?: categoriasAvgOrderByAggregateInput
    _max?: categoriasMaxOrderByAggregateInput
    _min?: categoriasMinOrderByAggregateInput
    _sum?: categoriasSumOrderByAggregateInput
  }

  export type categoriasScalarWhereWithAggregatesInput = {
    AND?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    OR?: categoriasScalarWhereWithAggregatesInput[]
    NOT?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"categorias"> | number
    nome_categoria?: StringWithAggregatesFilter<"categorias"> | string
    icon_categoria?: StringWithAggregatesFilter<"categorias"> | string
  }

  export type freelancer_categoriaWhereInput = {
    AND?: freelancer_categoriaWhereInput | freelancer_categoriaWhereInput[]
    OR?: freelancer_categoriaWhereInput[]
    NOT?: freelancer_categoriaWhereInput | freelancer_categoriaWhereInput[]
    id?: IntFilter<"freelancer_categoria"> | number
    id_freelancer?: IntFilter<"freelancer_categoria"> | number
    id_categoria?: IntFilter<"freelancer_categoria"> | number
  }

  export type freelancer_categoriaOrderByWithRelationInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_categoria?: SortOrder
  }

  export type freelancer_categoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: freelancer_categoriaWhereInput | freelancer_categoriaWhereInput[]
    OR?: freelancer_categoriaWhereInput[]
    NOT?: freelancer_categoriaWhereInput | freelancer_categoriaWhereInput[]
    id_freelancer?: IntFilter<"freelancer_categoria"> | number
    id_categoria?: IntFilter<"freelancer_categoria"> | number
  }, "id" | "id">

  export type freelancer_categoriaOrderByWithAggregationInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_categoria?: SortOrder
    _count?: freelancer_categoriaCountOrderByAggregateInput
    _avg?: freelancer_categoriaAvgOrderByAggregateInput
    _max?: freelancer_categoriaMaxOrderByAggregateInput
    _min?: freelancer_categoriaMinOrderByAggregateInput
    _sum?: freelancer_categoriaSumOrderByAggregateInput
  }

  export type freelancer_categoriaScalarWhereWithAggregatesInput = {
    AND?: freelancer_categoriaScalarWhereWithAggregatesInput | freelancer_categoriaScalarWhereWithAggregatesInput[]
    OR?: freelancer_categoriaScalarWhereWithAggregatesInput[]
    NOT?: freelancer_categoriaScalarWhereWithAggregatesInput | freelancer_categoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"freelancer_categoria"> | number
    id_freelancer?: IntWithAggregatesFilter<"freelancer_categoria"> | number
    id_categoria?: IntWithAggregatesFilter<"freelancer_categoria"> | number
  }

  export type freelancer_habilidadeWhereInput = {
    AND?: freelancer_habilidadeWhereInput | freelancer_habilidadeWhereInput[]
    OR?: freelancer_habilidadeWhereInput[]
    NOT?: freelancer_habilidadeWhereInput | freelancer_habilidadeWhereInput[]
    id?: IntFilter<"freelancer_habilidade"> | number
    id_freelancer?: IntFilter<"freelancer_habilidade"> | number
    id_habilidade?: IntFilter<"freelancer_habilidade"> | number
  }

  export type freelancer_habilidadeOrderByWithRelationInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_habilidade?: SortOrder
  }

  export type freelancer_habilidadeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: freelancer_habilidadeWhereInput | freelancer_habilidadeWhereInput[]
    OR?: freelancer_habilidadeWhereInput[]
    NOT?: freelancer_habilidadeWhereInput | freelancer_habilidadeWhereInput[]
    id_freelancer?: IntFilter<"freelancer_habilidade"> | number
    id_habilidade?: IntFilter<"freelancer_habilidade"> | number
  }, "id" | "id">

  export type freelancer_habilidadeOrderByWithAggregationInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_habilidade?: SortOrder
    _count?: freelancer_habilidadeCountOrderByAggregateInput
    _avg?: freelancer_habilidadeAvgOrderByAggregateInput
    _max?: freelancer_habilidadeMaxOrderByAggregateInput
    _min?: freelancer_habilidadeMinOrderByAggregateInput
    _sum?: freelancer_habilidadeSumOrderByAggregateInput
  }

  export type freelancer_habilidadeScalarWhereWithAggregatesInput = {
    AND?: freelancer_habilidadeScalarWhereWithAggregatesInput | freelancer_habilidadeScalarWhereWithAggregatesInput[]
    OR?: freelancer_habilidadeScalarWhereWithAggregatesInput[]
    NOT?: freelancer_habilidadeScalarWhereWithAggregatesInput | freelancer_habilidadeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"freelancer_habilidade"> | number
    id_freelancer?: IntWithAggregatesFilter<"freelancer_habilidade"> | number
    id_habilidade?: IntWithAggregatesFilter<"freelancer_habilidade"> | number
  }

  export type habilidadesWhereInput = {
    AND?: habilidadesWhereInput | habilidadesWhereInput[]
    OR?: habilidadesWhereInput[]
    NOT?: habilidadesWhereInput | habilidadesWhereInput[]
    id?: IntFilter<"habilidades"> | number
    nome_habilidade?: StringFilter<"habilidades"> | string
    icon_habilidade?: StringFilter<"habilidades"> | string
  }

  export type habilidadesOrderByWithRelationInput = {
    id?: SortOrder
    nome_habilidade?: SortOrder
    icon_habilidade?: SortOrder
  }

  export type habilidadesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: habilidadesWhereInput | habilidadesWhereInput[]
    OR?: habilidadesWhereInput[]
    NOT?: habilidadesWhereInput | habilidadesWhereInput[]
    nome_habilidade?: StringFilter<"habilidades"> | string
    icon_habilidade?: StringFilter<"habilidades"> | string
  }, "id" | "id">

  export type habilidadesOrderByWithAggregationInput = {
    id?: SortOrder
    nome_habilidade?: SortOrder
    icon_habilidade?: SortOrder
    _count?: habilidadesCountOrderByAggregateInput
    _avg?: habilidadesAvgOrderByAggregateInput
    _max?: habilidadesMaxOrderByAggregateInput
    _min?: habilidadesMinOrderByAggregateInput
    _sum?: habilidadesSumOrderByAggregateInput
  }

  export type habilidadesScalarWhereWithAggregatesInput = {
    AND?: habilidadesScalarWhereWithAggregatesInput | habilidadesScalarWhereWithAggregatesInput[]
    OR?: habilidadesScalarWhereWithAggregatesInput[]
    NOT?: habilidadesScalarWhereWithAggregatesInput | habilidadesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"habilidades"> | number
    nome_habilidade?: StringWithAggregatesFilter<"habilidades"> | string
    icon_habilidade?: StringWithAggregatesFilter<"habilidades"> | string
  }

  export type cadastro_clienteCreateInput = {
    nome_cliente: string
    cnpj_cliente: bigint | number
    email_cliente: string
    senha_cliente: string
    is_premium?: boolean
  }

  export type cadastro_clienteUncheckedCreateInput = {
    id?: number
    nome_cliente: string
    cnpj_cliente: bigint | number
    email_cliente: string
    senha_cliente: string
    is_premium?: boolean
  }

  export type cadastro_clienteUpdateInput = {
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: BigIntFieldUpdateOperationsInput | bigint | number
    email_cliente?: StringFieldUpdateOperationsInput | string
    senha_cliente?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_clienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: BigIntFieldUpdateOperationsInput | bigint | number
    email_cliente?: StringFieldUpdateOperationsInput | string
    senha_cliente?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_clienteCreateManyInput = {
    id?: number
    nome_cliente: string
    cnpj_cliente: bigint | number
    email_cliente: string
    senha_cliente: string
    is_premium?: boolean
  }

  export type cadastro_clienteUpdateManyMutationInput = {
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: BigIntFieldUpdateOperationsInput | bigint | number
    email_cliente?: StringFieldUpdateOperationsInput | string
    senha_cliente?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_clienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: BigIntFieldUpdateOperationsInput | bigint | number
    email_cliente?: StringFieldUpdateOperationsInput | string
    senha_cliente?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_freelancerCreateInput = {
    nome_freelancer: string
    data_nascimento: Date | string
    cpf_freelancer: bigint | number
    email_freelancer: string
    senha_freelancer: string
    is_premium?: boolean
  }

  export type cadastro_freelancerUncheckedCreateInput = {
    id?: number
    nome_freelancer: string
    data_nascimento: Date | string
    cpf_freelancer: bigint | number
    email_freelancer: string
    senha_freelancer: string
    is_premium?: boolean
  }

  export type cadastro_freelancerUpdateInput = {
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: StringFieldUpdateOperationsInput | string
    senha_freelancer?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_freelancerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: StringFieldUpdateOperationsInput | string
    senha_freelancer?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_freelancerCreateManyInput = {
    id?: number
    nome_freelancer: string
    data_nascimento: Date | string
    cpf_freelancer: bigint | number
    email_freelancer: string
    senha_freelancer: string
    is_premium?: boolean
  }

  export type cadastro_freelancerUpdateManyMutationInput = {
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: StringFieldUpdateOperationsInput | string
    senha_freelancer?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_freelancerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: StringFieldUpdateOperationsInput | string
    senha_freelancer?: StringFieldUpdateOperationsInput | string
    is_premium?: BoolFieldUpdateOperationsInput | boolean
  }

  export type categoriasCreateInput = {
    nome_categoria: string
    icon_categoria: string
  }

  export type categoriasUncheckedCreateInput = {
    id?: number
    nome_categoria: string
    icon_categoria: string
  }

  export type categoriasUpdateInput = {
    nome_categoria?: StringFieldUpdateOperationsInput | string
    icon_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type categoriasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_categoria?: StringFieldUpdateOperationsInput | string
    icon_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type categoriasCreateManyInput = {
    id?: number
    nome_categoria: string
    icon_categoria: string
  }

  export type categoriasUpdateManyMutationInput = {
    nome_categoria?: StringFieldUpdateOperationsInput | string
    icon_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type categoriasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_categoria?: StringFieldUpdateOperationsInput | string
    icon_categoria?: StringFieldUpdateOperationsInput | string
  }

  export type freelancer_categoriaCreateInput = {
    id_freelancer: number
    id_categoria: number
  }

  export type freelancer_categoriaUncheckedCreateInput = {
    id?: number
    id_freelancer: number
    id_categoria: number
  }

  export type freelancer_categoriaUpdateInput = {
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
  }

  export type freelancer_categoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
  }

  export type freelancer_categoriaCreateManyInput = {
    id?: number
    id_freelancer: number
    id_categoria: number
  }

  export type freelancer_categoriaUpdateManyMutationInput = {
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
  }

  export type freelancer_categoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
  }

  export type freelancer_habilidadeCreateInput = {
    id_freelancer: number
    id_habilidade: number
  }

  export type freelancer_habilidadeUncheckedCreateInput = {
    id?: number
    id_freelancer: number
    id_habilidade: number
  }

  export type freelancer_habilidadeUpdateInput = {
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_habilidade?: IntFieldUpdateOperationsInput | number
  }

  export type freelancer_habilidadeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_habilidade?: IntFieldUpdateOperationsInput | number
  }

  export type freelancer_habilidadeCreateManyInput = {
    id?: number
    id_freelancer: number
    id_habilidade: number
  }

  export type freelancer_habilidadeUpdateManyMutationInput = {
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_habilidade?: IntFieldUpdateOperationsInput | number
  }

  export type freelancer_habilidadeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_freelancer?: IntFieldUpdateOperationsInput | number
    id_habilidade?: IntFieldUpdateOperationsInput | number
  }

  export type habilidadesCreateInput = {
    nome_habilidade: string
    icon_habilidade: string
  }

  export type habilidadesUncheckedCreateInput = {
    id?: number
    nome_habilidade: string
    icon_habilidade: string
  }

  export type habilidadesUpdateInput = {
    nome_habilidade?: StringFieldUpdateOperationsInput | string
    icon_habilidade?: StringFieldUpdateOperationsInput | string
  }

  export type habilidadesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_habilidade?: StringFieldUpdateOperationsInput | string
    icon_habilidade?: StringFieldUpdateOperationsInput | string
  }

  export type habilidadesCreateManyInput = {
    id?: number
    nome_habilidade: string
    icon_habilidade: string
  }

  export type habilidadesUpdateManyMutationInput = {
    nome_habilidade?: StringFieldUpdateOperationsInput | string
    icon_habilidade?: StringFieldUpdateOperationsInput | string
  }

  export type habilidadesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_habilidade?: StringFieldUpdateOperationsInput | string
    icon_habilidade?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type cadastro_clienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_clienteAvgOrderByAggregateInput = {
    id?: SortOrder
    cnpj_cliente?: SortOrder
  }

  export type cadastro_clienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_clienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_clienteSumOrderByAggregateInput = {
    id?: SortOrder
    cnpj_cliente?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type cadastro_freelancerCountOrderByAggregateInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_freelancerAvgOrderByAggregateInput = {
    id?: SortOrder
    cpf_freelancer?: SortOrder
  }

  export type cadastro_freelancerMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_freelancerMinOrderByAggregateInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
    is_premium?: SortOrder
  }

  export type cadastro_freelancerSumOrderByAggregateInput = {
    id?: SortOrder
    cpf_freelancer?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type categoriasCountOrderByAggregateInput = {
    id?: SortOrder
    nome_categoria?: SortOrder
    icon_categoria?: SortOrder
  }

  export type categoriasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoriasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_categoria?: SortOrder
    icon_categoria?: SortOrder
  }

  export type categoriasMinOrderByAggregateInput = {
    id?: SortOrder
    nome_categoria?: SortOrder
    icon_categoria?: SortOrder
  }

  export type categoriasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type freelancer_categoriaCountOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_categoria?: SortOrder
  }

  export type freelancer_categoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_categoria?: SortOrder
  }

  export type freelancer_categoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_categoria?: SortOrder
  }

  export type freelancer_categoriaMinOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_categoria?: SortOrder
  }

  export type freelancer_categoriaSumOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_categoria?: SortOrder
  }

  export type freelancer_habilidadeCountOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_habilidade?: SortOrder
  }

  export type freelancer_habilidadeAvgOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_habilidade?: SortOrder
  }

  export type freelancer_habilidadeMaxOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_habilidade?: SortOrder
  }

  export type freelancer_habilidadeMinOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_habilidade?: SortOrder
  }

  export type freelancer_habilidadeSumOrderByAggregateInput = {
    id?: SortOrder
    id_freelancer?: SortOrder
    id_habilidade?: SortOrder
  }

  export type habilidadesCountOrderByAggregateInput = {
    id?: SortOrder
    nome_habilidade?: SortOrder
    icon_habilidade?: SortOrder
  }

  export type habilidadesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type habilidadesMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_habilidade?: SortOrder
    icon_habilidade?: SortOrder
  }

  export type habilidadesMinOrderByAggregateInput = {
    id?: SortOrder
    nome_habilidade?: SortOrder
    icon_habilidade?: SortOrder
  }

  export type habilidadesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use cadastro_clienteDefaultArgs instead
     */
    export type cadastro_clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cadastro_clienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cadastro_freelancerDefaultArgs instead
     */
    export type cadastro_freelancerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cadastro_freelancerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriasDefaultArgs instead
     */
    export type categoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use freelancer_categoriaDefaultArgs instead
     */
    export type freelancer_categoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = freelancer_categoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use freelancer_habilidadeDefaultArgs instead
     */
    export type freelancer_habilidadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = freelancer_habilidadeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use habilidadesDefaultArgs instead
     */
    export type habilidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = habilidadesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}