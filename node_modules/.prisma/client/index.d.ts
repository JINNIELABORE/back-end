
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cadastro_cliente
 * 
 */
export type cadastro_cliente = $Result.DefaultSelection<Prisma.$cadastro_clientePayload>
/**
 * Model cadastro_freelancer
 * 
 */
export type cadastro_freelancer = $Result.DefaultSelection<Prisma.$cadastro_freelancerPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cadastro_clientes
 * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cadastro_clientes
   * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cadastro_cliente`: Exposes CRUD operations for the **cadastro_cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_clientes
    * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
    * ```
    */
  get cadastro_cliente(): Prisma.cadastro_clienteDelegate<ExtArgs>;

  /**
   * `prisma.cadastro_freelancer`: Exposes CRUD operations for the **cadastro_freelancer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_freelancers
    * const cadastro_freelancers = await prisma.cadastro_freelancer.findMany()
    * ```
    */
  get cadastro_freelancer(): Prisma.cadastro_freelancerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cadastro_cliente: 'cadastro_cliente',
    cadastro_freelancer: 'cadastro_freelancer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "cadastro_cliente" | "cadastro_freelancer"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      cadastro_cliente: {
        payload: Prisma.$cadastro_clientePayload<ExtArgs>
        fields: Prisma.cadastro_clienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_clienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_clienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          findFirst: {
            args: Prisma.cadastro_clienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_clienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          findMany: {
            args: Prisma.cadastro_clienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>[]
          }
          create: {
            args: Prisma.cadastro_clienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          createMany: {
            args: Prisma.cadastro_clienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.cadastro_clienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          update: {
            args: Prisma.cadastro_clienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          deleteMany: {
            args: Prisma.cadastro_clienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_clienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_clienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_clientePayload>
          }
          aggregate: {
            args: Prisma.Cadastro_clienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_cliente>
          }
          groupBy: {
            args: Prisma.cadastro_clienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_clienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_clienteCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_clienteCountAggregateOutputType> | number
          }
        }
      }
      cadastro_freelancer: {
        payload: Prisma.$cadastro_freelancerPayload<ExtArgs>
        fields: Prisma.cadastro_freelancerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_freelancerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_freelancerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          findFirst: {
            args: Prisma.cadastro_freelancerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_freelancerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          findMany: {
            args: Prisma.cadastro_freelancerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>[]
          }
          create: {
            args: Prisma.cadastro_freelancerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          createMany: {
            args: Prisma.cadastro_freelancerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.cadastro_freelancerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          update: {
            args: Prisma.cadastro_freelancerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          deleteMany: {
            args: Prisma.cadastro_freelancerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_freelancerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_freelancerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_freelancerPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_freelancerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_freelancer>
          }
          groupBy: {
            args: Prisma.cadastro_freelancerGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_freelancerGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_freelancerCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_freelancerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model cadastro_cliente
   */

  export type AggregateCadastro_cliente = {
    _count: Cadastro_clienteCountAggregateOutputType | null
    _avg: Cadastro_clienteAvgAggregateOutputType | null
    _sum: Cadastro_clienteSumAggregateOutputType | null
    _min: Cadastro_clienteMinAggregateOutputType | null
    _max: Cadastro_clienteMaxAggregateOutputType | null
  }

  export type Cadastro_clienteAvgAggregateOutputType = {
    id: number | null
    cnpj_cliente: number | null
  }

  export type Cadastro_clienteSumAggregateOutputType = {
    id: number | null
    cnpj_cliente: bigint | null
  }

  export type Cadastro_clienteMinAggregateOutputType = {
    id: number | null
    nome_cliente: string | null
    cnpj_cliente: bigint | null
    email_cliente: string | null
    senha_cliente: string | null
  }

  export type Cadastro_clienteMaxAggregateOutputType = {
    id: number | null
    nome_cliente: string | null
    cnpj_cliente: bigint | null
    email_cliente: string | null
    senha_cliente: string | null
  }

  export type Cadastro_clienteCountAggregateOutputType = {
    id: number
    nome_cliente: number
    cnpj_cliente: number
    email_cliente: number
    senha_cliente: number
    _all: number
  }


  export type Cadastro_clienteAvgAggregateInputType = {
    id?: true
    cnpj_cliente?: true
  }

  export type Cadastro_clienteSumAggregateInputType = {
    id?: true
    cnpj_cliente?: true
  }

  export type Cadastro_clienteMinAggregateInputType = {
    id?: true
    nome_cliente?: true
    cnpj_cliente?: true
    email_cliente?: true
    senha_cliente?: true
  }

  export type Cadastro_clienteMaxAggregateInputType = {
    id?: true
    nome_cliente?: true
    cnpj_cliente?: true
    email_cliente?: true
    senha_cliente?: true
  }

  export type Cadastro_clienteCountAggregateInputType = {
    id?: true
    nome_cliente?: true
    cnpj_cliente?: true
    email_cliente?: true
    senha_cliente?: true
    _all?: true
  }

  export type Cadastro_clienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_cliente to aggregate.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_clientes
    **/
    _count?: true | Cadastro_clienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cadastro_clienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cadastro_clienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_clienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_clienteMaxAggregateInputType
  }

  export type GetCadastro_clienteAggregateType<T extends Cadastro_clienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_cliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_cliente[P]>
      : GetScalarType<T[P], AggregateCadastro_cliente[P]>
  }




  export type cadastro_clienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_clienteWhereInput
    orderBy?: cadastro_clienteOrderByWithAggregationInput | cadastro_clienteOrderByWithAggregationInput[]
    by: Cadastro_clienteScalarFieldEnum[] | Cadastro_clienteScalarFieldEnum
    having?: cadastro_clienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_clienteCountAggregateInputType | true
    _avg?: Cadastro_clienteAvgAggregateInputType
    _sum?: Cadastro_clienteSumAggregateInputType
    _min?: Cadastro_clienteMinAggregateInputType
    _max?: Cadastro_clienteMaxAggregateInputType
  }

  export type Cadastro_clienteGroupByOutputType = {
    id: number
    nome_cliente: string
    cnpj_cliente: bigint | null
    email_cliente: string | null
    senha_cliente: string
    _count: Cadastro_clienteCountAggregateOutputType | null
    _avg: Cadastro_clienteAvgAggregateOutputType | null
    _sum: Cadastro_clienteSumAggregateOutputType | null
    _min: Cadastro_clienteMinAggregateOutputType | null
    _max: Cadastro_clienteMaxAggregateOutputType | null
  }

  type GetCadastro_clienteGroupByPayload<T extends cadastro_clienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_clienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_clienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_clienteGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_clienteGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_clienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_cliente?: boolean
    cnpj_cliente?: boolean
    email_cliente?: boolean
    senha_cliente?: boolean
  }, ExtArgs["result"]["cadastro_cliente"]>


  export type cadastro_clienteSelectScalar = {
    id?: boolean
    nome_cliente?: boolean
    cnpj_cliente?: boolean
    email_cliente?: boolean
    senha_cliente?: boolean
  }


  export type $cadastro_clientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_cliente"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome_cliente: string
      cnpj_cliente: bigint | null
      email_cliente: string | null
      senha_cliente: string
    }, ExtArgs["result"]["cadastro_cliente"]>
    composites: {}
  }

  type cadastro_clienteGetPayload<S extends boolean | null | undefined | cadastro_clienteDefaultArgs> = $Result.GetResult<Prisma.$cadastro_clientePayload, S>

  type cadastro_clienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cadastro_clienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cadastro_clienteCountAggregateInputType | true
    }

  export interface cadastro_clienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_cliente'], meta: { name: 'cadastro_cliente' } }
    /**
     * Find zero or one Cadastro_cliente that matches the filter.
     * @param {cadastro_clienteFindUniqueArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cadastro_clienteFindUniqueArgs>(args: SelectSubset<T, cadastro_clienteFindUniqueArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cadastro_cliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cadastro_clienteFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cadastro_clienteFindUniqueOrThrowArgs>(args: SelectSubset<T, cadastro_clienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cadastro_cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteFindFirstArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cadastro_clienteFindFirstArgs>(args?: SelectSubset<T, cadastro_clienteFindFirstArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cadastro_cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteFindFirstOrThrowArgs} args - Arguments to find a Cadastro_cliente
     * @example
     * // Get one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cadastro_clienteFindFirstOrThrowArgs>(args?: SelectSubset<T, cadastro_clienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cadastro_clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_clientes
     * const cadastro_clientes = await prisma.cadastro_cliente.findMany()
     * 
     * // Get first 10 Cadastro_clientes
     * const cadastro_clientes = await prisma.cadastro_cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_clienteWithIdOnly = await prisma.cadastro_cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cadastro_clienteFindManyArgs>(args?: SelectSubset<T, cadastro_clienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cadastro_cliente.
     * @param {cadastro_clienteCreateArgs} args - Arguments to create a Cadastro_cliente.
     * @example
     * // Create one Cadastro_cliente
     * const Cadastro_cliente = await prisma.cadastro_cliente.create({
     *   data: {
     *     // ... data to create a Cadastro_cliente
     *   }
     * })
     * 
     */
    create<T extends cadastro_clienteCreateArgs>(args: SelectSubset<T, cadastro_clienteCreateArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cadastro_clientes.
     * @param {cadastro_clienteCreateManyArgs} args - Arguments to create many Cadastro_clientes.
     * @example
     * // Create many Cadastro_clientes
     * const cadastro_cliente = await prisma.cadastro_cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cadastro_clienteCreateManyArgs>(args?: SelectSubset<T, cadastro_clienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro_cliente.
     * @param {cadastro_clienteDeleteArgs} args - Arguments to delete one Cadastro_cliente.
     * @example
     * // Delete one Cadastro_cliente
     * const Cadastro_cliente = await prisma.cadastro_cliente.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_cliente
     *   }
     * })
     * 
     */
    delete<T extends cadastro_clienteDeleteArgs>(args: SelectSubset<T, cadastro_clienteDeleteArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cadastro_cliente.
     * @param {cadastro_clienteUpdateArgs} args - Arguments to update one Cadastro_cliente.
     * @example
     * // Update one Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cadastro_clienteUpdateArgs>(args: SelectSubset<T, cadastro_clienteUpdateArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cadastro_clientes.
     * @param {cadastro_clienteDeleteManyArgs} args - Arguments to filter Cadastro_clientes to delete.
     * @example
     * // Delete a few Cadastro_clientes
     * const { count } = await prisma.cadastro_cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cadastro_clienteDeleteManyArgs>(args?: SelectSubset<T, cadastro_clienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_clientes
     * const cadastro_cliente = await prisma.cadastro_cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cadastro_clienteUpdateManyArgs>(args: SelectSubset<T, cadastro_clienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_cliente.
     * @param {cadastro_clienteUpsertArgs} args - Arguments to update or create a Cadastro_cliente.
     * @example
     * // Update or create a Cadastro_cliente
     * const cadastro_cliente = await prisma.cadastro_cliente.upsert({
     *   create: {
     *     // ... data to create a Cadastro_cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_cliente we want to update
     *   }
     * })
     */
    upsert<T extends cadastro_clienteUpsertArgs>(args: SelectSubset<T, cadastro_clienteUpsertArgs<ExtArgs>>): Prisma__cadastro_clienteClient<$Result.GetResult<Prisma.$cadastro_clientePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cadastro_clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteCountArgs} args - Arguments to filter Cadastro_clientes to count.
     * @example
     * // Count the number of Cadastro_clientes
     * const count = await prisma.cadastro_cliente.count({
     *   where: {
     *     // ... the filter for the Cadastro_clientes we want to count
     *   }
     * })
    **/
    count<T extends cadastro_clienteCountArgs>(
      args?: Subset<T, cadastro_clienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_clienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_clienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_clienteAggregateArgs>(args: Subset<T, Cadastro_clienteAggregateArgs>): Prisma.PrismaPromise<GetCadastro_clienteAggregateType<T>>

    /**
     * Group by Cadastro_cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_clienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_clienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_clienteGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_clienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_clienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_clienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_cliente model
   */
  readonly fields: cadastro_clienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_clienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cadastro_cliente model
   */ 
  interface cadastro_clienteFieldRefs {
    readonly id: FieldRef<"cadastro_cliente", 'Int'>
    readonly nome_cliente: FieldRef<"cadastro_cliente", 'String'>
    readonly cnpj_cliente: FieldRef<"cadastro_cliente", 'BigInt'>
    readonly email_cliente: FieldRef<"cadastro_cliente", 'String'>
    readonly senha_cliente: FieldRef<"cadastro_cliente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cadastro_cliente findUnique
   */
  export type cadastro_clienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente findUniqueOrThrow
   */
  export type cadastro_clienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente findFirst
   */
  export type cadastro_clienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_clientes.
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_clientes.
     */
    distinct?: Cadastro_clienteScalarFieldEnum | Cadastro_clienteScalarFieldEnum[]
  }

  /**
   * cadastro_cliente findFirstOrThrow
   */
  export type cadastro_clienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_cliente to fetch.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_clientes.
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_clientes.
     */
    distinct?: Cadastro_clienteScalarFieldEnum | Cadastro_clienteScalarFieldEnum[]
  }

  /**
   * cadastro_cliente findMany
   */
  export type cadastro_clienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_clientes to fetch.
     */
    where?: cadastro_clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_clientes to fetch.
     */
    orderBy?: cadastro_clienteOrderByWithRelationInput | cadastro_clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_clientes.
     */
    cursor?: cadastro_clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_clientes.
     */
    skip?: number
    distinct?: Cadastro_clienteScalarFieldEnum | Cadastro_clienteScalarFieldEnum[]
  }

  /**
   * cadastro_cliente create
   */
  export type cadastro_clienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * The data needed to create a cadastro_cliente.
     */
    data: XOR<cadastro_clienteCreateInput, cadastro_clienteUncheckedCreateInput>
  }

  /**
   * cadastro_cliente createMany
   */
  export type cadastro_clienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_clientes.
     */
    data: cadastro_clienteCreateManyInput | cadastro_clienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_cliente update
   */
  export type cadastro_clienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * The data needed to update a cadastro_cliente.
     */
    data: XOR<cadastro_clienteUpdateInput, cadastro_clienteUncheckedUpdateInput>
    /**
     * Choose, which cadastro_cliente to update.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente updateMany
   */
  export type cadastro_clienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_clientes.
     */
    data: XOR<cadastro_clienteUpdateManyMutationInput, cadastro_clienteUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_clientes to update
     */
    where?: cadastro_clienteWhereInput
  }

  /**
   * cadastro_cliente upsert
   */
  export type cadastro_clienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * The filter to search for the cadastro_cliente to update in case it exists.
     */
    where: cadastro_clienteWhereUniqueInput
    /**
     * In case the cadastro_cliente found by the `where` argument doesn't exist, create a new cadastro_cliente with this data.
     */
    create: XOR<cadastro_clienteCreateInput, cadastro_clienteUncheckedCreateInput>
    /**
     * In case the cadastro_cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_clienteUpdateInput, cadastro_clienteUncheckedUpdateInput>
  }

  /**
   * cadastro_cliente delete
   */
  export type cadastro_clienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
    /**
     * Filter which cadastro_cliente to delete.
     */
    where: cadastro_clienteWhereUniqueInput
  }

  /**
   * cadastro_cliente deleteMany
   */
  export type cadastro_clienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_clientes to delete
     */
    where?: cadastro_clienteWhereInput
  }

  /**
   * cadastro_cliente without action
   */
  export type cadastro_clienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_cliente
     */
    select?: cadastro_clienteSelect<ExtArgs> | null
  }


  /**
   * Model cadastro_freelancer
   */

  export type AggregateCadastro_freelancer = {
    _count: Cadastro_freelancerCountAggregateOutputType | null
    _avg: Cadastro_freelancerAvgAggregateOutputType | null
    _sum: Cadastro_freelancerSumAggregateOutputType | null
    _min: Cadastro_freelancerMinAggregateOutputType | null
    _max: Cadastro_freelancerMaxAggregateOutputType | null
  }

  export type Cadastro_freelancerAvgAggregateOutputType = {
    id: number | null
    cpf_freelancer: number | null
  }

  export type Cadastro_freelancerSumAggregateOutputType = {
    id: number | null
    cpf_freelancer: bigint | null
  }

  export type Cadastro_freelancerMinAggregateOutputType = {
    id: number | null
    nome_freelancer: string | null
    data_nascimento: Date | null
    cpf_freelancer: bigint | null
    email_freelancer: string | null
    senha_freelancer: string | null
  }

  export type Cadastro_freelancerMaxAggregateOutputType = {
    id: number | null
    nome_freelancer: string | null
    data_nascimento: Date | null
    cpf_freelancer: bigint | null
    email_freelancer: string | null
    senha_freelancer: string | null
  }

  export type Cadastro_freelancerCountAggregateOutputType = {
    id: number
    nome_freelancer: number
    data_nascimento: number
    cpf_freelancer: number
    email_freelancer: number
    senha_freelancer: number
    _all: number
  }


  export type Cadastro_freelancerAvgAggregateInputType = {
    id?: true
    cpf_freelancer?: true
  }

  export type Cadastro_freelancerSumAggregateInputType = {
    id?: true
    cpf_freelancer?: true
  }

  export type Cadastro_freelancerMinAggregateInputType = {
    id?: true
    nome_freelancer?: true
    data_nascimento?: true
    cpf_freelancer?: true
    email_freelancer?: true
    senha_freelancer?: true
  }

  export type Cadastro_freelancerMaxAggregateInputType = {
    id?: true
    nome_freelancer?: true
    data_nascimento?: true
    cpf_freelancer?: true
    email_freelancer?: true
    senha_freelancer?: true
  }

  export type Cadastro_freelancerCountAggregateInputType = {
    id?: true
    nome_freelancer?: true
    data_nascimento?: true
    cpf_freelancer?: true
    email_freelancer?: true
    senha_freelancer?: true
    _all?: true
  }

  export type Cadastro_freelancerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_freelancer to aggregate.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_freelancers
    **/
    _count?: true | Cadastro_freelancerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cadastro_freelancerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cadastro_freelancerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_freelancerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_freelancerMaxAggregateInputType
  }

  export type GetCadastro_freelancerAggregateType<T extends Cadastro_freelancerAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_freelancer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_freelancer[P]>
      : GetScalarType<T[P], AggregateCadastro_freelancer[P]>
  }




  export type cadastro_freelancerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_freelancerWhereInput
    orderBy?: cadastro_freelancerOrderByWithAggregationInput | cadastro_freelancerOrderByWithAggregationInput[]
    by: Cadastro_freelancerScalarFieldEnum[] | Cadastro_freelancerScalarFieldEnum
    having?: cadastro_freelancerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_freelancerCountAggregateInputType | true
    _avg?: Cadastro_freelancerAvgAggregateInputType
    _sum?: Cadastro_freelancerSumAggregateInputType
    _min?: Cadastro_freelancerMinAggregateInputType
    _max?: Cadastro_freelancerMaxAggregateInputType
  }

  export type Cadastro_freelancerGroupByOutputType = {
    id: number
    nome_freelancer: string
    data_nascimento: Date
    cpf_freelancer: bigint
    email_freelancer: string | null
    senha_freelancer: string
    _count: Cadastro_freelancerCountAggregateOutputType | null
    _avg: Cadastro_freelancerAvgAggregateOutputType | null
    _sum: Cadastro_freelancerSumAggregateOutputType | null
    _min: Cadastro_freelancerMinAggregateOutputType | null
    _max: Cadastro_freelancerMaxAggregateOutputType | null
  }

  type GetCadastro_freelancerGroupByPayload<T extends cadastro_freelancerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_freelancerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_freelancerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_freelancerGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_freelancerGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_freelancerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_freelancer?: boolean
    data_nascimento?: boolean
    cpf_freelancer?: boolean
    email_freelancer?: boolean
    senha_freelancer?: boolean
  }, ExtArgs["result"]["cadastro_freelancer"]>


  export type cadastro_freelancerSelectScalar = {
    id?: boolean
    nome_freelancer?: boolean
    data_nascimento?: boolean
    cpf_freelancer?: boolean
    email_freelancer?: boolean
    senha_freelancer?: boolean
  }


  export type $cadastro_freelancerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_freelancer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome_freelancer: string
      data_nascimento: Date
      cpf_freelancer: bigint
      email_freelancer: string | null
      senha_freelancer: string
    }, ExtArgs["result"]["cadastro_freelancer"]>
    composites: {}
  }

  type cadastro_freelancerGetPayload<S extends boolean | null | undefined | cadastro_freelancerDefaultArgs> = $Result.GetResult<Prisma.$cadastro_freelancerPayload, S>

  type cadastro_freelancerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cadastro_freelancerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cadastro_freelancerCountAggregateInputType | true
    }

  export interface cadastro_freelancerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_freelancer'], meta: { name: 'cadastro_freelancer' } }
    /**
     * Find zero or one Cadastro_freelancer that matches the filter.
     * @param {cadastro_freelancerFindUniqueArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cadastro_freelancerFindUniqueArgs>(args: SelectSubset<T, cadastro_freelancerFindUniqueArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cadastro_freelancer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cadastro_freelancerFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cadastro_freelancerFindUniqueOrThrowArgs>(args: SelectSubset<T, cadastro_freelancerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cadastro_freelancer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerFindFirstArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cadastro_freelancerFindFirstArgs>(args?: SelectSubset<T, cadastro_freelancerFindFirstArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cadastro_freelancer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerFindFirstOrThrowArgs} args - Arguments to find a Cadastro_freelancer
     * @example
     * // Get one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cadastro_freelancerFindFirstOrThrowArgs>(args?: SelectSubset<T, cadastro_freelancerFindFirstOrThrowArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cadastro_freelancers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_freelancers
     * const cadastro_freelancers = await prisma.cadastro_freelancer.findMany()
     * 
     * // Get first 10 Cadastro_freelancers
     * const cadastro_freelancers = await prisma.cadastro_freelancer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_freelancerWithIdOnly = await prisma.cadastro_freelancer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cadastro_freelancerFindManyArgs>(args?: SelectSubset<T, cadastro_freelancerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cadastro_freelancer.
     * @param {cadastro_freelancerCreateArgs} args - Arguments to create a Cadastro_freelancer.
     * @example
     * // Create one Cadastro_freelancer
     * const Cadastro_freelancer = await prisma.cadastro_freelancer.create({
     *   data: {
     *     // ... data to create a Cadastro_freelancer
     *   }
     * })
     * 
     */
    create<T extends cadastro_freelancerCreateArgs>(args: SelectSubset<T, cadastro_freelancerCreateArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cadastro_freelancers.
     * @param {cadastro_freelancerCreateManyArgs} args - Arguments to create many Cadastro_freelancers.
     * @example
     * // Create many Cadastro_freelancers
     * const cadastro_freelancer = await prisma.cadastro_freelancer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cadastro_freelancerCreateManyArgs>(args?: SelectSubset<T, cadastro_freelancerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro_freelancer.
     * @param {cadastro_freelancerDeleteArgs} args - Arguments to delete one Cadastro_freelancer.
     * @example
     * // Delete one Cadastro_freelancer
     * const Cadastro_freelancer = await prisma.cadastro_freelancer.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_freelancer
     *   }
     * })
     * 
     */
    delete<T extends cadastro_freelancerDeleteArgs>(args: SelectSubset<T, cadastro_freelancerDeleteArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cadastro_freelancer.
     * @param {cadastro_freelancerUpdateArgs} args - Arguments to update one Cadastro_freelancer.
     * @example
     * // Update one Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cadastro_freelancerUpdateArgs>(args: SelectSubset<T, cadastro_freelancerUpdateArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cadastro_freelancers.
     * @param {cadastro_freelancerDeleteManyArgs} args - Arguments to filter Cadastro_freelancers to delete.
     * @example
     * // Delete a few Cadastro_freelancers
     * const { count } = await prisma.cadastro_freelancer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cadastro_freelancerDeleteManyArgs>(args?: SelectSubset<T, cadastro_freelancerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_freelancers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_freelancers
     * const cadastro_freelancer = await prisma.cadastro_freelancer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cadastro_freelancerUpdateManyArgs>(args: SelectSubset<T, cadastro_freelancerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_freelancer.
     * @param {cadastro_freelancerUpsertArgs} args - Arguments to update or create a Cadastro_freelancer.
     * @example
     * // Update or create a Cadastro_freelancer
     * const cadastro_freelancer = await prisma.cadastro_freelancer.upsert({
     *   create: {
     *     // ... data to create a Cadastro_freelancer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_freelancer we want to update
     *   }
     * })
     */
    upsert<T extends cadastro_freelancerUpsertArgs>(args: SelectSubset<T, cadastro_freelancerUpsertArgs<ExtArgs>>): Prisma__cadastro_freelancerClient<$Result.GetResult<Prisma.$cadastro_freelancerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cadastro_freelancers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerCountArgs} args - Arguments to filter Cadastro_freelancers to count.
     * @example
     * // Count the number of Cadastro_freelancers
     * const count = await prisma.cadastro_freelancer.count({
     *   where: {
     *     // ... the filter for the Cadastro_freelancers we want to count
     *   }
     * })
    **/
    count<T extends cadastro_freelancerCountArgs>(
      args?: Subset<T, cadastro_freelancerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_freelancerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_freelancer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_freelancerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_freelancerAggregateArgs>(args: Subset<T, Cadastro_freelancerAggregateArgs>): Prisma.PrismaPromise<GetCadastro_freelancerAggregateType<T>>

    /**
     * Group by Cadastro_freelancer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_freelancerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_freelancerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_freelancerGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_freelancerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_freelancerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_freelancerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_freelancer model
   */
  readonly fields: cadastro_freelancerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_freelancer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_freelancerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cadastro_freelancer model
   */ 
  interface cadastro_freelancerFieldRefs {
    readonly id: FieldRef<"cadastro_freelancer", 'Int'>
    readonly nome_freelancer: FieldRef<"cadastro_freelancer", 'String'>
    readonly data_nascimento: FieldRef<"cadastro_freelancer", 'DateTime'>
    readonly cpf_freelancer: FieldRef<"cadastro_freelancer", 'BigInt'>
    readonly email_freelancer: FieldRef<"cadastro_freelancer", 'String'>
    readonly senha_freelancer: FieldRef<"cadastro_freelancer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cadastro_freelancer findUnique
   */
  export type cadastro_freelancerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer findUniqueOrThrow
   */
  export type cadastro_freelancerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer findFirst
   */
  export type cadastro_freelancerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_freelancers.
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_freelancers.
     */
    distinct?: Cadastro_freelancerScalarFieldEnum | Cadastro_freelancerScalarFieldEnum[]
  }

  /**
   * cadastro_freelancer findFirstOrThrow
   */
  export type cadastro_freelancerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancer to fetch.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_freelancers.
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_freelancers.
     */
    distinct?: Cadastro_freelancerScalarFieldEnum | Cadastro_freelancerScalarFieldEnum[]
  }

  /**
   * cadastro_freelancer findMany
   */
  export type cadastro_freelancerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_freelancers to fetch.
     */
    where?: cadastro_freelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_freelancers to fetch.
     */
    orderBy?: cadastro_freelancerOrderByWithRelationInput | cadastro_freelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_freelancers.
     */
    cursor?: cadastro_freelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_freelancers.
     */
    skip?: number
    distinct?: Cadastro_freelancerScalarFieldEnum | Cadastro_freelancerScalarFieldEnum[]
  }

  /**
   * cadastro_freelancer create
   */
  export type cadastro_freelancerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * The data needed to create a cadastro_freelancer.
     */
    data: XOR<cadastro_freelancerCreateInput, cadastro_freelancerUncheckedCreateInput>
  }

  /**
   * cadastro_freelancer createMany
   */
  export type cadastro_freelancerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_freelancers.
     */
    data: cadastro_freelancerCreateManyInput | cadastro_freelancerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_freelancer update
   */
  export type cadastro_freelancerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * The data needed to update a cadastro_freelancer.
     */
    data: XOR<cadastro_freelancerUpdateInput, cadastro_freelancerUncheckedUpdateInput>
    /**
     * Choose, which cadastro_freelancer to update.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer updateMany
   */
  export type cadastro_freelancerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_freelancers.
     */
    data: XOR<cadastro_freelancerUpdateManyMutationInput, cadastro_freelancerUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_freelancers to update
     */
    where?: cadastro_freelancerWhereInput
  }

  /**
   * cadastro_freelancer upsert
   */
  export type cadastro_freelancerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * The filter to search for the cadastro_freelancer to update in case it exists.
     */
    where: cadastro_freelancerWhereUniqueInput
    /**
     * In case the cadastro_freelancer found by the `where` argument doesn't exist, create a new cadastro_freelancer with this data.
     */
    create: XOR<cadastro_freelancerCreateInput, cadastro_freelancerUncheckedCreateInput>
    /**
     * In case the cadastro_freelancer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_freelancerUpdateInput, cadastro_freelancerUncheckedUpdateInput>
  }

  /**
   * cadastro_freelancer delete
   */
  export type cadastro_freelancerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
    /**
     * Filter which cadastro_freelancer to delete.
     */
    where: cadastro_freelancerWhereUniqueInput
  }

  /**
   * cadastro_freelancer deleteMany
   */
  export type cadastro_freelancerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_freelancers to delete
     */
    where?: cadastro_freelancerWhereInput
  }

  /**
   * cadastro_freelancer without action
   */
  export type cadastro_freelancerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_freelancer
     */
    select?: cadastro_freelancerSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Cadastro_clienteScalarFieldEnum: {
    id: 'id',
    nome_cliente: 'nome_cliente',
    cnpj_cliente: 'cnpj_cliente',
    email_cliente: 'email_cliente',
    senha_cliente: 'senha_cliente'
  };

  export type Cadastro_clienteScalarFieldEnum = (typeof Cadastro_clienteScalarFieldEnum)[keyof typeof Cadastro_clienteScalarFieldEnum]


  export const Cadastro_freelancerScalarFieldEnum: {
    id: 'id',
    nome_freelancer: 'nome_freelancer',
    data_nascimento: 'data_nascimento',
    cpf_freelancer: 'cpf_freelancer',
    email_freelancer: 'email_freelancer',
    senha_freelancer: 'senha_freelancer'
  };

  export type Cadastro_freelancerScalarFieldEnum = (typeof Cadastro_freelancerScalarFieldEnum)[keyof typeof Cadastro_freelancerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type cadastro_clienteWhereInput = {
    AND?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    OR?: cadastro_clienteWhereInput[]
    NOT?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    id?: IntFilter<"cadastro_cliente"> | number
    nome_cliente?: StringFilter<"cadastro_cliente"> | string
    cnpj_cliente?: BigIntNullableFilter<"cadastro_cliente"> | bigint | number | null
    email_cliente?: StringNullableFilter<"cadastro_cliente"> | string | null
    senha_cliente?: StringFilter<"cadastro_cliente"> | string
  }

  export type cadastro_clienteOrderByWithRelationInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrderInput | SortOrder
    email_cliente?: SortOrderInput | SortOrder
    senha_cliente?: SortOrder
  }

  export type cadastro_clienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    OR?: cadastro_clienteWhereInput[]
    NOT?: cadastro_clienteWhereInput | cadastro_clienteWhereInput[]
    nome_cliente?: StringFilter<"cadastro_cliente"> | string
    cnpj_cliente?: BigIntNullableFilter<"cadastro_cliente"> | bigint | number | null
    email_cliente?: StringNullableFilter<"cadastro_cliente"> | string | null
    senha_cliente?: StringFilter<"cadastro_cliente"> | string
  }, "id">

  export type cadastro_clienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrderInput | SortOrder
    email_cliente?: SortOrderInput | SortOrder
    senha_cliente?: SortOrder
    _count?: cadastro_clienteCountOrderByAggregateInput
    _avg?: cadastro_clienteAvgOrderByAggregateInput
    _max?: cadastro_clienteMaxOrderByAggregateInput
    _min?: cadastro_clienteMinOrderByAggregateInput
    _sum?: cadastro_clienteSumOrderByAggregateInput
  }

  export type cadastro_clienteScalarWhereWithAggregatesInput = {
    AND?: cadastro_clienteScalarWhereWithAggregatesInput | cadastro_clienteScalarWhereWithAggregatesInput[]
    OR?: cadastro_clienteScalarWhereWithAggregatesInput[]
    NOT?: cadastro_clienteScalarWhereWithAggregatesInput | cadastro_clienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cadastro_cliente"> | number
    nome_cliente?: StringWithAggregatesFilter<"cadastro_cliente"> | string
    cnpj_cliente?: BigIntNullableWithAggregatesFilter<"cadastro_cliente"> | bigint | number | null
    email_cliente?: StringNullableWithAggregatesFilter<"cadastro_cliente"> | string | null
    senha_cliente?: StringWithAggregatesFilter<"cadastro_cliente"> | string
  }

  export type cadastro_freelancerWhereInput = {
    AND?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    OR?: cadastro_freelancerWhereInput[]
    NOT?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    id?: IntFilter<"cadastro_freelancer"> | number
    nome_freelancer?: StringFilter<"cadastro_freelancer"> | string
    data_nascimento?: DateTimeFilter<"cadastro_freelancer"> | Date | string
    cpf_freelancer?: BigIntFilter<"cadastro_freelancer"> | bigint | number
    email_freelancer?: StringNullableFilter<"cadastro_freelancer"> | string | null
    senha_freelancer?: StringFilter<"cadastro_freelancer"> | string
  }

  export type cadastro_freelancerOrderByWithRelationInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrderInput | SortOrder
    senha_freelancer?: SortOrder
  }

  export type cadastro_freelancerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    OR?: cadastro_freelancerWhereInput[]
    NOT?: cadastro_freelancerWhereInput | cadastro_freelancerWhereInput[]
    nome_freelancer?: StringFilter<"cadastro_freelancer"> | string
    data_nascimento?: DateTimeFilter<"cadastro_freelancer"> | Date | string
    cpf_freelancer?: BigIntFilter<"cadastro_freelancer"> | bigint | number
    email_freelancer?: StringNullableFilter<"cadastro_freelancer"> | string | null
    senha_freelancer?: StringFilter<"cadastro_freelancer"> | string
  }, "id">

  export type cadastro_freelancerOrderByWithAggregationInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrderInput | SortOrder
    senha_freelancer?: SortOrder
    _count?: cadastro_freelancerCountOrderByAggregateInput
    _avg?: cadastro_freelancerAvgOrderByAggregateInput
    _max?: cadastro_freelancerMaxOrderByAggregateInput
    _min?: cadastro_freelancerMinOrderByAggregateInput
    _sum?: cadastro_freelancerSumOrderByAggregateInput
  }

  export type cadastro_freelancerScalarWhereWithAggregatesInput = {
    AND?: cadastro_freelancerScalarWhereWithAggregatesInput | cadastro_freelancerScalarWhereWithAggregatesInput[]
    OR?: cadastro_freelancerScalarWhereWithAggregatesInput[]
    NOT?: cadastro_freelancerScalarWhereWithAggregatesInput | cadastro_freelancerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cadastro_freelancer"> | number
    nome_freelancer?: StringWithAggregatesFilter<"cadastro_freelancer"> | string
    data_nascimento?: DateTimeWithAggregatesFilter<"cadastro_freelancer"> | Date | string
    cpf_freelancer?: BigIntWithAggregatesFilter<"cadastro_freelancer"> | bigint | number
    email_freelancer?: StringNullableWithAggregatesFilter<"cadastro_freelancer"> | string | null
    senha_freelancer?: StringWithAggregatesFilter<"cadastro_freelancer"> | string
  }

  export type cadastro_clienteCreateInput = {
    nome_cliente: string
    cnpj_cliente?: bigint | number | null
    email_cliente?: string | null
    senha_cliente: string
  }

  export type cadastro_clienteUncheckedCreateInput = {
    id?: number
    nome_cliente: string
    cnpj_cliente?: bigint | number | null
    email_cliente?: string | null
    senha_cliente: string
  }

  export type cadastro_clienteUpdateInput = {
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email_cliente?: NullableStringFieldUpdateOperationsInput | string | null
    senha_cliente?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_clienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email_cliente?: NullableStringFieldUpdateOperationsInput | string | null
    senha_cliente?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_clienteCreateManyInput = {
    id?: number
    nome_cliente: string
    cnpj_cliente?: bigint | number | null
    email_cliente?: string | null
    senha_cliente: string
  }

  export type cadastro_clienteUpdateManyMutationInput = {
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email_cliente?: NullableStringFieldUpdateOperationsInput | string | null
    senha_cliente?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_clienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_cliente?: StringFieldUpdateOperationsInput | string
    cnpj_cliente?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email_cliente?: NullableStringFieldUpdateOperationsInput | string | null
    senha_cliente?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_freelancerCreateInput = {
    nome_freelancer: string
    data_nascimento: Date | string
    cpf_freelancer: bigint | number
    email_freelancer?: string | null
    senha_freelancer: string
  }

  export type cadastro_freelancerUncheckedCreateInput = {
    id?: number
    nome_freelancer: string
    data_nascimento: Date | string
    cpf_freelancer: bigint | number
    email_freelancer?: string | null
    senha_freelancer: string
  }

  export type cadastro_freelancerUpdateInput = {
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: NullableStringFieldUpdateOperationsInput | string | null
    senha_freelancer?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_freelancerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: NullableStringFieldUpdateOperationsInput | string | null
    senha_freelancer?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_freelancerCreateManyInput = {
    id?: number
    nome_freelancer: string
    data_nascimento: Date | string
    cpf_freelancer: bigint | number
    email_freelancer?: string | null
    senha_freelancer: string
  }

  export type cadastro_freelancerUpdateManyMutationInput = {
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: NullableStringFieldUpdateOperationsInput | string | null
    senha_freelancer?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_freelancerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_freelancer?: StringFieldUpdateOperationsInput | string
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf_freelancer?: BigIntFieldUpdateOperationsInput | bigint | number
    email_freelancer?: NullableStringFieldUpdateOperationsInput | string | null
    senha_freelancer?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type cadastro_clienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
  }

  export type cadastro_clienteAvgOrderByAggregateInput = {
    id?: SortOrder
    cnpj_cliente?: SortOrder
  }

  export type cadastro_clienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
  }

  export type cadastro_clienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome_cliente?: SortOrder
    cnpj_cliente?: SortOrder
    email_cliente?: SortOrder
    senha_cliente?: SortOrder
  }

  export type cadastro_clienteSumOrderByAggregateInput = {
    id?: SortOrder
    cnpj_cliente?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type cadastro_freelancerCountOrderByAggregateInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
  }

  export type cadastro_freelancerAvgOrderByAggregateInput = {
    id?: SortOrder
    cpf_freelancer?: SortOrder
  }

  export type cadastro_freelancerMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
  }

  export type cadastro_freelancerMinOrderByAggregateInput = {
    id?: SortOrder
    nome_freelancer?: SortOrder
    data_nascimento?: SortOrder
    cpf_freelancer?: SortOrder
    email_freelancer?: SortOrder
    senha_freelancer?: SortOrder
  }

  export type cadastro_freelancerSumOrderByAggregateInput = {
    id?: SortOrder
    cpf_freelancer?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use cadastro_clienteDefaultArgs instead
     */
    export type cadastro_clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cadastro_clienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cadastro_freelancerDefaultArgs instead
     */
    export type cadastro_freelancerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cadastro_freelancerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}