generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cadastro_cliente {
  id            Int     @id @unique(map: "id") @default(autoincrement())
  nome_cliente  String  @db.VarChar(50)
  cnpj_cliente  BigInt
  email_cliente String  @db.VarChar(255)
  senha_cliente String  @db.VarChar(80)
  is_premium    Boolean @default(false)
}

model cadastro_freelancer {
  id               Int      @id @unique(map: "id") @default(autoincrement())
  nome_freelancer  String   @db.VarChar(50)
  data_nascimento  DateTime @db.Date
  cpf_freelancer   BigInt
  email_freelancer String   @db.VarChar(255)
  senha_freelancer String   @db.VarChar(80)
  is_premium       Boolean  @default(false)
}

model categorias {
  id             Int    @id @unique(map: "id") @default(autoincrement())
  nome_categoria String @db.VarChar(50)
  icon_categoria String @db.VarChar(200)
}

model descricao_perfil {
  id            Int    @id @default(autoincrement())
  descricao     String @db.Text
  id_cliente    Int?
  id_freelancer Int?

  @@index([id_cliente], map: "id_cliente")
  @@index([id_freelancer], map: "id_freelancer")
}

model foto_perfil {
  id            Int    @id @default(autoincrement())
  foto_perfil   String @db.Text
  id_cliente    Int?
  id_freelancer Int?

  @@index([id_cliente], map: "id_cliente")
  @@index([id_freelancer], map: "id_freelancer")
}

model freelancer_categoria {
  id            Int @id @unique(map: "id") @default(autoincrement())
  id_freelancer Int
  id_categoria  Int

  @@index([id_categoria], map: "id_categoria")
  @@index([id_freelancer], map: "id_freelancer")
}

model freelancer_habilidade {
  id            Int @id @unique(map: "id") @default(autoincrement())
  id_freelancer Int
  id_habilidade Int

  @@index([id_freelancer], map: "id_freelancer")
  @@index([id_habilidade], map: "id_habilidade")
}

model habilidades {
  id              Int    @id @unique(map: "id") @default(autoincrement())
  nome_habilidade String @db.VarChar(50)
  icon_habilidade String @db.VarChar(200)
}

model nivel_experiencia {
  id                Int     @id @default(autoincrement())
  nivel_experiencia String? @db.VarChar(20)
}

model portfolio {
  id      Int    @id @default(autoincrement())
  arquivo String @db.Text
}

model publicacao_projetos {
  id                   Int     @id @default(autoincrement())
  id_cliente           Int
  nome_projeto         String? @db.VarChar(50)
  descricao_projeto    String? @db.VarChar(150)
  orcamento            Float
  id_nivel_experiencia Int
  is_premium           Boolean @default(false)

  @@index([id_nivel_experiencia], map: "id_nivel_experiencia")
  @@index([id_cliente], map: "id_cliente")
}

model categoria_publicacao_projetos {
  id           Int @id @default(autoincrement())
  id_projeto   Int
  id_categoria Int

  @@index([id_categoria], map: "id_categoria")
  @@index([id_projeto], map: "id_projeto")
}

model habilidade_publicacao_projetos {
  id            Int @id @default(autoincrement())
  id_projeto    Int
  id_habilidade Int

  @@index([id_habilidade], map: "id_habilidade")
  @@index([id_projeto], map: "id_projeto")
}

model portfolio_freelancer {
  id            Int @id @default(autoincrement())
  id_portfolio  Int
  id_freelancer Int

  @@index([id_freelancer], map: "id_freelancer")
  @@index([id_portfolio], map: "id_portfolio")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model avaliacao {
  id         Int    @id @default(autoincrement())
  estrelas   Int
  comentario String @db.Text
}

model avaliacao_usuario {
  id             Int                              @id @default(autoincrement())
  id_avaliacao   Int
  id_avaliador   Int
  tipo_avaliador avaliacao_usuario_tipo_avaliador
  id_avaliado    Int
  tipo_avaliado  avaliacao_usuario_tipo_avaliado

  @@index([id_avaliacao], map: "id_avaliacao")
}

model pagamentos {
  id               Int                         @id @default(autoincrement())
  id_cliente       Int
  id_freelancer    Int
  valor            Decimal                     @db.Decimal(10, 2)
  metodo_pagamento pagamentos_metodo_pagamento
  status_pagamento pagamentos_status_pagamento @default(pendente)
  descricao        String?                     @db.Text
  link_pagamento   String?                     @db.Text

  @@index([id_cliente], map: "id_cliente")
  @@index([id_freelancer], map: "id_freelancer")
}

model freelancer_projeto {
  id            Int     @id @default(autoincrement())
  id_projeto    Int
  id_freelancer Int
  status        Boolean @default(false)

  @@index([id_freelancer], map: "id_freelancer")
  @@index([id_projeto], map: "id_projeto")
}

model denuncia {
  id        Int    @id @default(autoincrement())
  arquivo   String @db.Text
  descricao String @db.Text
}

model disputa {
  id               Int                      @id @default(autoincrement())
  id_denuncia      Int
  id_denunciante   Int
  tipo_denunciante disputa_tipo_denunciante
  id_denunciado    Int
  tipo_denunciado  disputa_tipo_denunciado
  situacao         disputa_situacao         @default(pendente)

  @@index([id_denuncia], map: "id_denuncia")
}

model solicitacao_pagamento {
  id               Int     @id @default(autoincrement())
  id_freelancer    Int
  valor_solicitado Decimal @db.Decimal(10, 2)

  @@index([id_freelancer], map: "id_freelancer")
}

enum avaliacao_usuario_tipo_avaliador {
  cliente
  freelancer
}

enum avaliacao_usuario_tipo_avaliado {
  cliente
  freelancer
}

enum pagamentos_status_pagamento {
  pendente
  concluido
  cancelado
}

enum disputa_tipo_denunciante {
  cliente
  freelancer
}

enum pagamentos_metodo_pagamento {
  pix
}

enum disputa_tipo_denunciado {
  cliente
  freelancer
}

enum disputa_situacao {
  pendente
  em_andamento @map("em andamento")
  resolvido
}
